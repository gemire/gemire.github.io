<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | gemire's space]]></title>
  <link href="http://hengzhang.me/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://hengzhang.me/"/>
  <updated>2016-02-20T14:04:23+08:00</updated>
  <id>http://hengzhang.me/</id>
  <author>
    <name><![CDATA[gemire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[记一次项目排错经历]]></title>
    <link href="http://hengzhang.me/java/2015/04/18/experience-with-project-debug/"/>
    <updated>2015-04-18T19:25:00+08:00</updated>
    <id>http://hengzhang.me/java/2015/04/18/experience-with-project-debug</id>
    <content type="html"><![CDATA[<p>起因，实验室做的前一个项目17号要到北京验收了，结果在数据库保存时出了一个让我们几个人调试了两天的bug。</p>

<p>控制台报错信息的意思是gis.new这张表不存在：</p>

<pre><code class="java">SQL Error: 1146, SQLState: 42S02　
caused by:com.mysql.jdbc.exceptions.MySQLSyntaxErrorException:Table 'gis.new' doesn't exist.
</code></pre>

<p>可问题的关键是我们的数据库中根本就没有这张表，当然不能保存了。一个最直接的想法就是会不会是谁在代码写的SQL语句不小心写错了，在这个想法的驱动下，我们就开始全面排查代码里面有没有与<strong>new</strong>相关的SQL查询。这个项目做了两年多，代码量还是比较大的，通过各种方法查了一个多小时，发现没有从<strong>new</strong>这张表里面做查询的代码。</p>

<!--more-->


<p>即然其他的model也都能正常的保存，代码里面也没有与<code>select xxx from new where xxx</code>这样的语句出现，那另一个想法就是打断点调试了。最后跟踪到出问题的地方的代码是这样：</p>

<pre><code class="java">public void save(SensorValue transientInstance) {
    log.debug("saving SensorValue instance");
    try {
        getHibernateTemplate().save(transientInstance);
        log.debug("save successful");
    } catch (RuntimeException re) {
        log.error("save failed", re);
        throw re;
    }
}
</code></pre>

<p>这段代码里面的<code>getHibernateTemplate().save(transientInstance)</code>这行语句出错了。于是我们就开始了各种分析，其他地方的保存操作都执行的好好的，这个地方为什么就出问题了呢？难道是Hibernate框架本身出问题了？还是代码其他地方存在没有发现的bug?</p>

<p>项目以前采用的数据库是SQL Server,后来因为项目需要在多个地方部署，而SQL Server的安装过程比较烦琐，一个地方出错了导致安装出错就很难在这个系统上成功安装了，又考虑到软件不是免费的原因，所以项目由我迁到了MySQL。当时迁移的时候也是花了比较大的功夫，SQL Server和MySQL反向工程生成的DAO是有差异的，而以前为了方便，在不同的DAO中添加了一些方法，这个是当时迁移时最痛苦的地方，总共有80多张表，只好一个一个对比之后把在DAO中添加的方法重新添加到迁移到MySQL后反向工程生成的DAO中，印象当时前前后后总共花了两三天的时间。从这里深深地体会到了设计模式的重要性！设计模式不就是前人踩过的无数坑之后的经验总结嘛，前人已经总结好了的经验我们却不应用在实践之中，实属不智！貌似扯得有点远，跑题了。。</p>

<p>考虑到系统已经可以正常的运行，所以排除了迁移过程中出现问题的可能性。既然代码都没有问题，那这个错误还依然出现，说明在一些我们不知道的地方还存在一些问题。</p>

<p>第一天下午的时候主播突然有了新发现，把数据库改为本地1月份备份的数据时，项目运行正常，没有报任何bug。这个发现是一个极强的hint,说明我们的数据库存在问题。但问题是我们的项目在1月份的时候基本上已经开发完毕，看了下代码提交记录，后面基本上没有改动。于是，我们又陷入了深深的纠结当中。我们花了一个上午和一个下午的时间，仍没有定位到出错的地方，卒。</p>

<p>真正的进展来自于第二天清晨华姐的一个发现，把数据库中与我们要存储的那张表相关的触发器删掉之后，就可以正常的执行插入操作了。到了这一步，事情已经很明显了，问题就出在与SensorValue表相关的触发器上面。</p>

<p>这个触发器应该是以前在使用SQL Server时通过图形化界面创建的，数据库没有迁移的的时候可以正常运行，上次迁移数据库，把数据库的表结构，数据，触发器还有存储过程都一并迁移到了MySQL平台，之前的测试并没有发现这个bug。触发器的创建语法如下所示：</p>

<pre><code class="java">DELIMITER //
 CREATE TRIGGER sensorValueRecordRestoreTrigger
after
insert
on sensor_value
for each row
begin
    declare sensorId int;
    declare value varchar(255);
    declare time datetime;
    declare flag varchar(10);

    select sensorId into SensorId  from new;
    select value into Value from new;
    select time into Time from new;
    select flag into flag from new;
    insert into sensor_values_real_time Values(sensorId, value, time,flag);

    if exists(select MIN(Time) from sensor_values_realTime where SensorId = sensorId  having count(*) &gt; 1) then
        delete from sensor_values_real_time where Time IN(select MIN(Time) from sensor_values_real_time where SensorId = sensorId  having count(*) &gt; 1);
    end if;
end
//
DELIMITER ;
</code></pre>

<p>看到了吧，bug来处于那几个<code>select xx into yy from new</code>的查询。之前报的错误表<code>gis.new</code>不存在和这里有关。然后简单的建了张表，写了个触发器，来重现出错的场景，这也是自己一直以来的习惯之一，简单粗暴地重现出错误，然后解决它。在执行插入语句后，果然报出了同样的错误：<code>ERROR 1146(42s02):Table triggertest.new doesn't exist.</code>。在得到错误的一瞬间，自己脑洞大开，这不是犯了一个很低级的错误么，new代表的是一行，不是一张表啊。</p>

<p>既然已经知道错误的原因了，那就把<code>from new</code>改为从把这些与表不存在的很明显的错误改完以后，改成<code>select xx into yyy from sensor_value</code>重新运行，本来以为此次抓虫到此结束的，结果以报出了以下错误：</p>

<pre><code>ERROR 1172: Result consisted of more than one row
</code></pre>

<p>大概意思是返回的结果有多行组成，这个问题也不大，仔细看了下，发现类似<code>select xxx into yyy  from sensor_value;</code>这样的语句出错了，只需要在后面加上where条件，限制从新插入的那一行数据中查询即可, 改为<code>select xxx into yyy  from sensor_value where id = new.id ;</code>。</p>

<p>嗯，改好后运行之后，不出所料，错误又来了：</p>

<pre><code class="java">ERROR 1093(HY000): You can't specify target table 'sensor_values_realtime' for update in FROM clause
</code></pre>

<p>看了下官方文档，发现MySQL在任何情况下，都不允许类似下面的update操作：</p>

<pre><code class="sql">create table apples(variety char(10) primary key, price int);

insert into apples values('fuji', 5), ('gala', 6);

update apples
    set price = (select price from apples where variety = 'gala')
    where variety = 'fuji';
</code></pre>

<p>也就是说，如果你对一张表进行增、删、改时，你不能再在内层嵌套查询中再reference这张表了。MySQL<a href="http://dev.mysql.com/doc/refman/5.7/en/update.html">官方文档</a>给出的解释是：<code>Currently, you cannot update a table and select from the same table in a subquery.</code>。嗯，我们使用MySQL,就得遵守人家制定的游戏规则，不然就没得玩儿。可问题是在一些情况下，如果没有refer update目标表的子查询，我们很难写出query语句来，这个是事实。</p>

<p>因为MySQL在执行from子查询语句的时候，会把其处理成临时表，所以我们可以这样干：把我们现在的子查询嵌套到另一个子查询当中，让其执行成为一张临时表，然后我们再在外面的那个子查询当中refer这个临时表。看代码：</p>

<pre><code class="sql">update apples
   set price = (
      select price from (
         select * from apples
      ) as x
      where variety = 'gala')
   where variety = 'fuji';
</code></pre>

<p>如果你想更深入地了解这段代码背后的原理，请参考MySQL的官方文档的<a href="http://dev.mysql.com/doc/internals/en/select-derived.html">相关部分</a>。</p>

<p>OK，问题到此解决，附上解决以后的触发器写法：</p>

<pre><code class="sql">DELIMITER //
 CREATE TRIGGER sensorValueRecordRestoreTrigger
after
insert
on sensor_value
for each row

begin
    declare mysensorId int;
    declare myvalue varchar(255);
    declare mytime datetime;
    declare myflag varchar(10);

    select sensorId into mysensorId  from sensor_value where Id=new.Id;
    select value into myvalue from sensor_value where Id=new.Id;
    select time into mytime from sensor_value where Id=new.Id;
    select flag into myflag from sensor_value where Id=new.Id;
    insert into sensor_values_realtime(SensorId,Value,Time,flag) Values(mysensorId, myvalue, mytime,myflag);

    if exists(select MIN(Time) from sensor_values_realtime where SensorId = mysensorId  having count(*) &gt; 1) then
            delete from sensor_values_realtime where Time in(select Time from (select MIN(Time) from sensor_values_realtime where SensorId = mysensorId  having count(*) &gt; 1 ) as x);
    end if;
end
//
DELIMITER ;
</code></pre>

<p>如有错误，欢迎拍砖~</p>
]]></content>
  </entry>
  
</feed>
