<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | gemire's space]]></title>
  <link href="http://hengzhang.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://hengzhang.me/"/>
  <updated>2015-11-16T14:18:17+08:00</updated>
  <id>http://hengzhang.me/</id>
  <author>
    <name><![CDATA[gemire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Decorators Step by Step (II)]]></title>
    <link href="http://hengzhang.me/python/2015/11/15/python-decorators_ii/"/>
    <updated>2015-11-15T09:30:00+08:00</updated>
    <id>http://hengzhang.me/python/2015/11/15/python-decorators_ii</id>
    <content type="html"><![CDATA[<p>在上一篇文章里面，我们介绍了没有参数的Decorator, 我们采用类的形式讲解，使大家更容易理解Python装饰器的两个工作阶段。</p>

<h2>Decorators without Arguments</h2>

<p>当我们创建一个没有参数的装饰器的时候，被装饰的函数对象作为参数传给类形式装饰器的构造函数，当被装饰的函数被调用的时候，真正调用的是类形式装饰器的<code>__call__</code>方法。</p>

<!--more-->


<pre><code class="python">class decoratorWithoutArguments(object):

    def __init__(self, f):
        """
        If there are no decorator arguments, the function
        to be decorated is passed to the constructor.
        """
        print("Inside __init__()")
        self.f = f

    def __call__(self, *args):
        """
        The __call__ method is not called until the
        decorated function is called.
        """
        print("Inside __call__()")
        self.f(*args)
        print("After self.f(*args)")

@decoratorWithoutArguments
def sayHello(a1, a2, a3, a4):
    print('sayHello arguments:', a1, a2, a3, a4)

print("After decoration")

print("Preparing to call sayHello()")
sayHello("say", "hello", "argument", "list")
print("After first sayHello() call")
sayHello("a", "different", "set of", "arguments")
print("After second sayHello() call")
</code></pre>

<p>被装饰的函数如果带有参数的话，其都被传递给<code>__call__</code>函数。</p>

<p>输出结果为：
<code>
Inside __init__()
After decoration
Preparing to call sayHello()
Inside __call__()
sayHello arguments: say hello argument list
After self.f(*args)
After first sayHello() call
Inside __call__()
sayHello arguments: a different set of arguments
After self.f(*args)
After second sayHello() call
</code></p>

<p>需要注意的一点是, <code>__init__</code>函数只在装饰阶段被调用一次，当我们每调用一次调用被装饰过的<code>sayHello()</code>的时候，是<code>__call__</code>函数被真正调用。</p>

<h2>Decorators with arguments</h2>

<p>在以前的例子中，在装饰阶段传给装饰器的只是一个需要被装饰的函数对象。如果这个地方需要传递其他参数，该如何处理？</p>

<pre><code class="python">class decoratorWithArguments(object):

    def __init__(self, arg1, arg2, arg3):
        """
        If there are decorator arguments, the function
        to be decorated is not passed to the constructor!
        """
        print("Inside __init__()")
        self.arg1 = arg1
        self.arg2 = arg2
        self.arg3 = arg3

    def __call__(self, f):
        """
        If there are decorator arguments, __call__() is only called
        once, as part of the decoration process! You can only give
        it a single argument, which is the function object.
        """
        print("Inside __call__()")
        def wrapped_f(*args):
            print("Inside wrapped_f()")
            print("Decorator arguments:", self.arg1, self.arg2, self.arg3)
            f(*args)
            print("After f(*args)")
        return wrapped_f

@decoratorWithArguments("hello", "world", 42)
def sayHello(a1, a2, a3, a4):
    print('sayHello arguments:', a1, a2, a3, a4)

print("After decoration")

print("Preparing to call sayHello()")
sayHello("say", "hello", "argument", "list")
print("after first sayHello() call")
sayHello("a", "different", "set of", "arguments")
print("after second sayHello() call")
</code></pre>

<p>从输出结果中，我们可以看到，带有参数的函数装饰器的行为和以前有很大不同：</p>

<pre><code>Inside __init__()
Inside __call__()
After decoration
Preparing to call sayHello()
Inside wrapped_f()
Decorator arguments: hello world 42
sayHello arguments: say hello argument list
After f(*args)
after first sayHello() call
Inside wrapped_f()
Decorator arguments: hello world 42
sayHello arguments: a different set of arguments
After f(*args)
after second sayHello() call
</code></pre>

<p>需要注意到在装饰阶段<code>__init__</code>函数被调用后，<code>__call__</code>立即被调用了。<code>__call__</code>方法只能接收一个参数，也就是需要被装饰的函数对象，并且必须返回一个经过装饰的函数对象，用来替换被装饰的函数对象。需要注意的是<code>__call__</code>方法只是在装饰阶段被调用一次，在调用阶段是<code>__call__</code>方法返回的函数被真正调用。</p>

<p>带有参数的装饰器采用类的形式时，constructor被用来捕获装饰器的参数，<code>__call__</code>方法不再作为经过装饰的函数对象，取而代之的是，你需要在<code>__call__</code>方法里面定义一个函数来作为被装饰的函数，作为后面函数调用时真正被调用的函数。带参数的装饰器和没有参数的装饰器的代码不太一样，你需要仔细领悟其中的精髓，以不变应万变。</p>

<h2>Decorator Functions with Decorator Arguments</h2>

<p>现在需要看一下比上面稍微复杂一点的带有参数的函数装饰器的实现：</p>

<pre><code class="python">def decoratorFunctionWithArguments(arg1, arg2, arg3):
    def wrap(f):
        print("Inside wrap()")
        def wrapped_f(*args):
            print("Inside wrapped_f()")
            print("Decorator arguments:", arg1, arg2, arg3)
            f(*args)
            print("After f(*args)")
        return wrapped_f
    return wrap

@decoratorFunctionWithArguments("hello", "world", 42)
def sayHello(a1, a2, a3, a4):
    print('sayHello arguments:', a1, a2, a3, a4)

print("After decoration")

print("Preparing to call sayHello()")
sayHello("say", "hello", "argument", "list")
print("after first sayHello() call")
sayHello("a", "different", "set of", "arguments")
print("after second sayHello() call")
</code></pre>

<p>输出结果为：</p>

<pre><code>Inside wrap()
After decoration
Preparing to call sayHello()
Inside wrapped_f()
Decorator arguments: hello world 42
sayHello arguments: say hello argument list
After f(*args)
after first sayHello() call
Inside wrapped_f()
Decorator arguments: hello world 42
sayHello arguments: a different set of arguments
After f(*args)
after second sayHello() call
</code></pre>

<p>带参数的函数装饰器的返回值必须是用来装饰被装饰函数的函数。也就是说，Python会在装饰阶段使用装饰器返回值，也就是真正的装饰函数，对传进来的需要被装饰的函数对象进行装饰。这也就是为什么这里会有三层函数的原因。最里面的函数是调用阶段真正被执行的函数。</p>

<p>因为closure, <code>wrapped_f</code>函数可得到装饰器的参数<code>arg1</code>, <code>arg2</code>和<code>arg3</code>，而不用像在类的版本里那样明确地把它们存储为属性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Decorators Step by Step (I)]]></title>
    <link href="http://hengzhang.me/python/2015/11/10/python-decorators_i/"/>
    <updated>2015-11-10T20:20:00+08:00</updated>
    <id>http://hengzhang.me/python/2015/11/10/python-decorators_i</id>
    <content type="html"><![CDATA[<p>Decorator绝对是Python语言most powerful的特性之一。熟悉设计模式的人可能认为Python的Decorator就是装饰器模式，事实上，python的decorator确实可以用来实现装饰器模式，但仅仅止步于此，是不能够真正使用好python的decorator的。</p>

<h2>用 decorators 可以做什么?</h2>

<p>   类似于Java的AOP, python的decorator允许我们在不修改原来函数或者类的代码的情况，动态的为我们的函数或者类增加新的功能。比如说，有100个函数，你想统计每一个函数执行的时间，想一下你会怎么做？是在每一个函数执行的前后分别获取当前系统的时间吗？No, 一个靠谱的程序员是尽量不会让他的代码重复的，何况这里有100次之多。扩大一下问题的规模，比如说现在有1000个，10000个，用上面提到的方法的话，你能保证不出错？
   <!--more--></p>

<p>   当我们使用decorator的时候，你可以这样做：</p>

<pre><code class="python">from datetime import datetime

def entryExit(func):
    def wrapper():
        print("Entering {0}".format(func.__name__))
        start = datetime.now()
        func()
        end = datetime.now()
        print("Exiting {0}".format(func.__name__))
        print("The total time of execution of {0} is: {1}".format(func.__name__, end - start))
    return wrapper

@entryExit
def func1():
    #do something

@entryExit
def func2():
    #do something

func1()
func2()
</code></pre>

<p>   换句话说，你只需要在每一个函数的前面添加一个类似Java的注解就OK了，方便吧。函数定义的上边新加的一行'@entryExit'意味着对下面定义的这个函数应用entryExit decorator.</p>

<h2>Prerequiste of Python Decorator</h2>

<p>   在开始讲解decorator之前，有一些关于Python函数的基础知识需要掌握下。如果你已经熟悉Closure,可以跳过这一部分。</p>

<p>   作为Python的first class citizen，函数也是对象，这意味着我们可以把函数当做变量来使用。因此，函数可以为其他变量赋值，可以作为其他函数的参数，也可以作为其他函数的返回值。</p>

<h3>Assign functions to variables</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coding</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">“</span><span class="n">coding</span> <span class="k">with</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">+</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">coding_language</span> <span class="o">=</span> <span class="n">coding</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">coding_language</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Scala</span><span class="err">”</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Outputs</span><span class="p">:</span> <span class="n">coding</span> <span class="k">with</span> <span class="n">Scala</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Define functions inside other functions</h3>

<pre><code class="python">def coding(name):
    def get_message():
        return “coding with “
    result = get_message() + name
    return result
print(coding(“Scala”))

#Outputs: coding with Scala
</code></pre>

<h3>Functions can be passed as parameters to other functions</h3>

<pre><code class="python">def coding(name):
    return “coding with “ + name
def call_func(func):
    other_name = “Rust”
    return func(other_name)
print call_func(“Scala”)
#Outputs: coding with Scala
</code></pre>

<h3>Functions can return other functions</h3>

<p>也就是说，函数可以generate其他的函数</p>

<pre><code class="python">def compose_coding_func():
    def get_message():
        return “coding with Rust”

    return get_message()

coding_language = compose_coding_func
print(coding_language())
#outpouts: coding with Rust
</code></pre>

<h3>Inner functions have access to the enclosing scope</h3>

<p>也即更广为人知的闭包概念。闭包是Python的decorator如此强大背后的支撑技术之一。
Functional Programming&ndash;Advanced R 这本书这样定义闭包：</p>

<blockquote><p> An object is data with functions. A closure is a function with data.” — John D. Cook</p></blockquote>

<p>可以这样来理解闭包：
以大家都熟悉的数学公式来举例。已知函数f(x) = log(x) + i, 其中i已经定义好的变量。要求 x = 8时函数f(x)的值f(8).此时等式f(8)=log(8)+i。要得到函数f(8)的值，我们需要知道变量i的值。若能够从函数的上下文得到i=1, 则可以得到f(8)=log(8)+1, 即若想得到函数值, 必须捕获i的值，这一过程可以理解为对函数执行“关闭”操作，所以叫做闭包。
关于如何得到变量i的值，有两种方法：</p>

<ul>
<li><p>动态作用域<br/>
i的值取决于函数调用时上下文中i的值。<br/>
比如 i = 3, 此时函数的值为f(8)=log(8)+3;<br/>
动态作用域存在一个问题，即以相同的参数调用函数，得到的返回值未必相同，其返回值还取决于上下文中i的值。如i的值在两次函数调用之间发生改变，则返回值不同。</p></li>
<li><p>词法作用域<br/>
i的值取决于函数定义时上下文中i的值。<br/>
比如</p></li>
</ul>


<pre><code>g(i) = lambda x : x + i;
f = g(2)
</code></pre>

<p>这里函数f返回一个和上面函数f形式一样的函数，i在此处为2， 那么执行
value = f(3)
得到的value值为5.</p>

<p> 以Pyton代码为例：</p>

<pre><code class="python">def g(i):
  return lambda x : x + i
f = g(2)
print(f(3))
#Outputs: 5
</code></pre>

<p>在这里f要‘记住’自己定义时 i 的值为2， 所以Python解释器在解释时，<strong>f(x) = x + i 和 i = 2 被打包在一起，也即‘闭包’</strong>， 意思是它是独立且完整的，仅仅依靠调用时传递给函数的参数来求值，不再依赖函数调用时的上下文。
需要说明的是，Python的闭包只支持outer scope变量的读操作，不支持out scope变量的赋值操作。</p>

<pre><code class="python">def compose_coding_func(name):
   def get_message():
    return “Hello programming language “ + name + “!”

   return get_message

coding = compose_coding_func(’Rust’)
print(coding())
#Outputs: Hello programming language Rust!
</code></pre>

<h2>Decorator是什么？</h2>

<p>   本质上，python的decorator是一个参数为函数，并且返回值也为函数的函数，也即函数式编程里面的higher order function。</p>

<p>   当在函数定义开始之前加上类似<code>@myDecorator</code>的语句，即代表给这个函数应用了<code>myDecorator</code>装饰器。这也是Python函数装饰器的语法糖，用起来非常方便，不是吗？</p>

<pre><code class="python">@myDecorator
def func():
   print(“inside func”)
</code></pre>

<p>   上面是我们写的第一个函数装饰器，当这段代码经过解释后，<code>func()</code> 被解释，得到的函数对象（注意，函数本身也是对象，一切皆对象）作用参数传递给<code>myDecorator</code>。我们在上面说过了，装饰器本身也是一个函数，无非其比较特殊，其接收的参数是一个函数对象，并且也返回一个函数。在这里，<code>myDecorator</code> 这个函数，也就是装饰器，做了一些该做的事情，并且最终返回一个函数，用来替换刚开始传进来的<code>func()</code>函数。为什么这样说？是因为Python解释器会将上面的代码解释为下面这个样子：</p>

<pre><code class="python">func = myDecorator(func)
</code></pre>

<p>这里的赋值语句即把<code>myDecorator</code>这个函数的返回值，即一个新的函数对象又传给了func这个变量，这时再去执行<code>func（）</code>，得到的其实是myDecorator返回的那个函数对象的执行结果了。<br/>
请注意，decorator必须得返回一个函数出来给func,不然后面再调用func()这个函数的时候就会出错！</p>

<h3>Using Class as Decorators</h3>

<p>看到这里，很多同学可能会有疑问了，<code>myDecorator</code>到底长啥样子呀？你也没跟我说。大部分关于Python的example会把myDecorator写成函数的形式，但我认为用类的形式来讲解decorator会使读者更清楚decorator背后运行的机制。</p>

<p>Decorator到底应该做什么？事实上，它可以做任何事情但通常，你会期望被装饰的函数在某一个点被装饰器调用，当然，你不调用也没有任何关系。</p>

<pre><code class="python">class myDecorator(object):
    def __init__(self, func):
        print(“inside myDecorator.__init__()”
        func()  #prove that function definition has completed

    def __call__(self):
        print(“insice myDecorator.__call__”)


@myDecorator
def func():
    print(“inside func()”)

print(“Finished decorating function func()”)
func()
</code></pre>

<p>上面代码的执行结果如下：</p>

<pre><code>inside myDecorator.__init__()
inside func()
Finished decorating function func()
inside myDecorator.__call__()
</code></pre>

<p>我们可以看到myDecorator这个类的构造器在装饰函数时即被执行。由于我们在<strong>init</strong>()这个构造器里面调用了<code>func()</code>函数，通过结果我们也可以得到函数func()在装饰器被调用之前已经被定义完成。需要注意的是myDecorator这个装饰器的构造器的参数为需要被装饰的函数对象。一般的用法是通过构造器得到需要被装饰的函数对象，然后在<code>__call__</code>函数里面回调。用类的形式来讲解，Decoration和calling是非常清晰的两个阶段，所以我说用类这种形式来讲解更容易理解。</p>

<p>当函数<code>func</code>经过装饰后，再被调用的时候，我们得到了和预期完全不同的结果。是<code>__call__</code>这个函数真正被调用，而不是原来<code>func</code>函数。装饰函数的执行结果替代了被装饰的函数的执行结果。在我们这个例子中，是<code>myDecorator</code>这个对象替换了<code>func</code>对象。</p>

<p>事实上，如果你不嫌麻烦，也可以这样做：</p>

<pre><code class="python">def foo():
    #do something
foo = staticMethod(foo)
</code></pre>

<p>通过Python提供的<code>@decorator</code>语法糖，你可以用下面的代码得到相同的结果：</p>

<pre><code class="python">@staticMethod
def foo():
    #do something
</code></pre>

<p>其中，<code>@decorator</code>语法糖的意思是: <strong>传递一个原始函数对象给装饰器（函数），装饰器（函数）返回的函数对象再重新赋给原始的函数对象</strong>。</p>

<p>我认为Pyton函数装饰器如此重要的一个原因是，其通过一个很简单的语法糖，改变了我们对于编程的认知。其通过语法约定，将<code>apply code to other code</code>的概念表现得淋漓尽致。</p>

<p>文章刚开始提到的那个例子用类的形式来写就是：</p>

<pre><code class="python">class entryExit(object):
    def __init__(self, func):
        self.func = func

    def __call__(self):
        print("Entering {0}".format(self.func.__name__))
        start = datetime.now()
        self.func()
        end = datetime.now()
        print("Exiting {0}".format(self.func.__name__))
        print("The total time of execution of {0} is: {1}".format(self.func.__name__, end - start))
</code></pre>

<p><code>entryExit</code>这个类的构造器将函数对象作为参数，在｀<strong>call</strong><code>这个函数里面，我们利用函数的</code><strong>name</strong>`属性来输出函数的名字，然后调用了被装饰的函数。</p>

<h3>Using Functions as Decorators</h3>

<p>终于讲到使用函数作为装饰器了。我们在开头的例子里使用的正是这里要讲的函数装饰器。</p>

<pre><code class="python">from datetime import datetime

def entryExit(func):
    def wrapper():
        print("Entering {0}".format(func.__name__))
        start = datetime.now()
        func()
        end = datetime.now()
        print("Exiting {0}".format(func.__name__))
        print("The total time of execution of {0} is: {1}".format(func.__name__, end - start))
    return wrapper

@entryExit
def func():
    print("hello, world")
    print(func.__name__)

func()
</code></pre>

<p>输出为：</p>

<pre><code>Entering func
hello, world
wrapper
Exiting func
The total time of execution of func is: 0:00:00
</code></pre>

<p><code>wrapper</code>函数在<code>entryExit</code>函数体中定义，当<code>entryExit</code>函数被调用的时候，<code>wrapper</code>函数即被创建并返回,替换掉原来的<code>func</code>函数成为“新”的<code>func</code>函数。要注意<code>wrapper</code>是一个closure, 因为它捕获了要被装饰的<code>func</code>函数对象。</p>

<p>同时，我们需要注意的是被装饰的函数<code>func</code>里面<code>print(func__name__)</code>这段代码的执行结果是<code>wrapper</code>, 这是因为在装饰阶段（还记得前面提到过的装饰器工作的两个阶段吗?)被装饰的函数<code>func</code>已经被替换掉了。你完全可以在你返回<code>wrapper</code>函数之前做一点小修改:</p>

<pre><code class="python">def entryExit(func):
    def wrapper():
        print("Entering {0}".format(func.__name__))
        start = datetime.now()
        func()
        end = datetime.now()
        print("Exiting {0}".format(func.__name__))
        print("The total time of execution of {0} is: {1}".format(func.__name__, end - start))
        wrapper.__name__ = func.__name__
    return wrapper
</code></pre>

<p>这样打印出来的函数名字就不再是<code>wrapper</code>, 而是<code>func</code>了。</p>

<p>在下一篇文章里面，我会介绍关于带有参数Python函数装饰器及Python内置的functools模块关于装饰器的内容。</p>

<p>​</p>
]]></content>
  </entry>
  
</feed>
