<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[gemire's space]]></title>
  <link href="http://hengzhang.me/atom.xml" rel="self"/>
  <link href="http://hengzhang.me/"/>
  <updated>2015-11-16T17:48:27+08:00</updated>
  <id>http://hengzhang.me/</id>
  <author>
    <name><![CDATA[gemire]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Decorators Step by Step (II)]]></title>
    <link href="http://hengzhang.me/python/2015/11/15/python-decorators_II/"/>
    <updated>2015-11-15T09:30:00+08:00</updated>
    <id>http://hengzhang.me/python/2015/11/15/python-decorators_II</id>
    <content type="html"><![CDATA[<p>在上一篇文章里面，我们介绍了没有参数的Decorator, 我们采用类的形式讲解，使大家更容易理解Python装饰器的两个工作阶段。</p>

<p>那么带有参数的装饰器该如何做呢？</p>

<!--more-->


<h2>Prerequisite</h2>

<p><code>*args</code>是可变的positional arguments列表，<code>**kwargs</code>是可变的keyword argument列表。并且, <code>*args</code>必须位于<code>**args</code>之前。</p>

<h3>*args</h3>

<p>类似Java的可变参数，当你不知道你的函数需要接收多少个参数时，你可以使用<code>*args</code>, 它允许给你的函数传递任意多个参数。</p>

<p><code>*args</code>会把传递进来的没有被匹配所有参数作为一个tuple来处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_everything</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">count</span><span class="p">,</span> <span class="n">thing</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{0}. {1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">thing</span><span class="p">))</span>
</span><span class='line'><span class="n">print_everything</span><span class="p">(</span><span class="s">&quot;havard&quot;</span><span class="p">,</span> <span class="s">&quot;mit&quot;</span><span class="p">,</span> <span class="s">&quot;columbia&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mf">0.</span> <span class="n">havard</span>
</span><span class='line'><span class="mf">1.</span> <span class="n">mit</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">columbia</span>
</span></code></pre></td></tr></table></div></figure>


<p>在可变参数之前，也可以定义0个或者多个常规参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">write_multiple_items</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">separator</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">separator</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常情况下，可变参数应该在常规参数之后，用以接收所有没有被匹配的参数。在<code>*args</code>后面出现的参数只能是<code>keyword</code>参数，意味着它们只能作为keywords　argument使用，而不能作为positional arguments使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">concat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;/&quot;</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s">&quot;earth&quot;</span><span class="p">,</span> <span class="s">&quot;mars&quot;</span><span class="p">,</span> <span class="s">&quot;venus&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s">&quot;earth&quot;</span><span class="p">,</span> <span class="s">&quot;mars&quot;</span><span class="p">,</span> <span class="s">&quot;venus&quot;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>其输出为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">earth</span><span class="o">/</span><span class="n">mars</span><span class="o">/</span><span class="n">venus</span>
</span><span class='line'><span class="n">earth</span><span class="o">.</span><span class="n">mars</span><span class="o">.</span><span class="n">venus</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>*args</code>不仅可以在函数定义时使用，同样也可以在函数调用时使用。不同的是，在函数定义时使用<code>*args</code>是一个将参数pack的过程，而在函数调用时使用<code>*args</code>是将参数unpack的过程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_three_things</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;a = {0}</span><span class="se">\n</span><span class="s">b = {1}</span><span class="se">\n</span><span class="s">c = {2}</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">mylist</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;stanford&#39;</span><span class="p">,</span> <span class="s">&#39;oxford&#39;</span><span class="p">,</span> <span class="s">&#39;cambridge&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">print_three_things</span><span class="p">(</span><span class="o">*</span><span class="n">mylist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">stanford</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">oxford</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">cambridge</span>
</span></code></pre></td></tr></table></div></figure>


<h3>**kwagrs</h3>

<p>类似的，<code>**kwargs</code>允许你处理没有提前定义的命名参数。</p>

<p><code>**kwargs</code>会把传递进来的没有被匹配keyword arguments作为一个dictionary来处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">table_things</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{0} = {1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_things</span><span class="p">(</span><span class="n">carrot</span> <span class="o">=</span> <span class="s">&#39;vegetable&#39;</span><span class="p">,</span> <span class="n">apple</span> <span class="o">=</span> <span class="s">&#39;fruit&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">carrot</span> <span class="o">=</span> <span class="n">vegetable</span>
</span><span class='line'><span class="n">apple</span> <span class="o">=</span> <span class="n">fruit</span>
</span></code></pre></td></tr></table></div></figure>


<p>和<code>*args</code>类似，在函数调用时也可以使用<code>**kwargs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">process_person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">sex</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">weight</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Your name is:{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Your age is:{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">age</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Your sex is:{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">sex</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Your height is:{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">height</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Your weight is:{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">weight</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">jack</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span><span class="s">&#39;jack&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">:</span><span class="mi">25</span><span class="p">,</span> <span class="s">&#39;sex&#39;</span><span class="p">:</span><span class="s">&#39;male&#39;</span><span class="p">,</span> <span class="s">&#39;height&#39;</span><span class="p">:</span><span class="s">&#39;180&#39;</span><span class="p">,</span> <span class="s">&#39;weight&#39;</span><span class="p">:</span><span class="s">&#39;70&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="n">process_person</span><span class="p">(</span><span class="o">**</span><span class="n">jack</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Your</span> <span class="n">name</span> <span class="ow">is</span><span class="p">:</span><span class="n">jack</span>
</span><span class='line'><span class="n">Your</span> <span class="n">age</span> <span class="ow">is</span><span class="p">:</span><span class="mi">25</span>
</span><span class='line'><span class="n">Your</span> <span class="n">sex</span> <span class="ow">is</span><span class="p">:</span><span class="n">male</span>
</span><span class='line'><span class="n">Your</span> <span class="n">height</span> <span class="ow">is</span><span class="p">:</span><span class="mi">180</span>
</span><span class='line'><span class="n">Your</span> <span class="n">weight</span> <span class="ow">is</span><span class="p">:</span><span class="mi">70</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面说过，’*args’是可变的positioal argument列表，所以<code>process_person</code>函数还可以这样调用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mary</span> <span class="o">=</span> <span class="p">[</span><span class="err">‘</span><span class="n">mary</span><span class="err">’</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="err">‘</span><span class="n">female</span><span class="err">’</span><span class="p">,</span> <span class="err">’</span><span class="mi">170</span><span class="err">’</span><span class="p">,</span> <span class="mi">55</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>事实上，你也可以混合使用命名参数, <code>*args</code>, <code>**kwargs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">table_things</span><span class="p">(</span><span class="n">titlestring</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在调用的时候，除了第一参数外，其他传递进来的positional argument参数都传给了<code>*args</code>, keyword argumnet都传给了<code>kwargs</code>.</p>

<p>在Python3里，你可以在赋值语句的左边使用<code>*l</code><a href="https://www.python.org/dev/peps/pep-3132/">(Extended Iterable Unpacking)</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">middle</span><span class="p">,</span> <span class="n">last</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Decorators without Arguments</h2>

<p>当我们创建一个没有参数的装饰器的时候，被装饰的函数对象作为参数传给类形式装饰器的构造函数，当被装饰的函数被调用的时候，真正调用的是类形式装饰器的<code>__call__</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">decoratorWithoutArguments</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        If there are no decorator arguments, the function</span>
</span><span class='line'><span class="sd">        to be decorated is passed to the constructor.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside __init__()&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">f</span> <span class="o">=</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        The __call__ method is not called until the</span>
</span><span class='line'><span class="sd">        decorated function is called.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside __call__()&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;After self.f(*args)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decoratorWithoutArguments</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;sayHello arguments:&#39;</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;After decoration&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Preparing to call sayHello()&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;say&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;argument&quot;</span><span class="p">,</span> <span class="s">&quot;list&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;After first sayHello() call&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;different&quot;</span><span class="p">,</span> <span class="s">&quot;set of&quot;</span><span class="p">,</span> <span class="s">&quot;arguments&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;After second sayHello() call&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>被装饰的函数如果带有参数的话，其都被传递给<code>__call__</code>函数。</p>

<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Inside</span> <span class="n">__init__</span><span class="p">()</span>
</span><span class='line'><span class="n">After</span> <span class="n">decoration</span>
</span><span class='line'><span class="n">Preparing</span> <span class="n">to</span> <span class="n">call</span> <span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">__call__</span><span class="p">()</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">say</span> <span class="n">hello</span> <span class="n">argument</span> <span class="nb">list</span>
</span><span class='line'><span class="n">After</span> <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">After</span> <span class="n">first</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">__call__</span><span class="p">()</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">a</span> <span class="n">different</span> <span class="nb">set</span> <span class="n">of</span> <span class="n">arguments</span>
</span><span class='line'><span class="n">After</span> <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">After</span> <span class="n">second</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的一点是, <code>__init__</code>函数只在装饰阶段被调用一次，当我们每调用一次调用被装饰过的<code>sayHello()</code>的时候，是<code>__call__</code>函数被真正调用。</p>

<h2>Decorators with arguments</h2>

<p>在以前的例子中，在装饰阶段传给装饰器的只是一个需要被装饰的函数对象。如果这个地方需要传递其他参数，该如何处理？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">decoratorWithArguments</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        If there are decorator arguments, the function</span>
</span><span class='line'><span class="sd">        to be decorated is not passed to the constructor!</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside __init__()&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">arg1</span> <span class="o">=</span> <span class="n">arg1</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">arg2</span> <span class="o">=</span> <span class="n">arg2</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">arg3</span> <span class="o">=</span> <span class="n">arg3</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        If there are decorator arguments, __call__() is only called</span>
</span><span class='line'><span class="sd">        once, as part of the decoration process! You can only give</span>
</span><span class='line'><span class="sd">        it a single argument, which is the function object.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside __call__()&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">wrapped_f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside wrapped_f()&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Decorator arguments:&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">arg1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">arg2</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">arg3</span><span class="p">)</span>
</span><span class='line'>            <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;After f(*args)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wrapped_f</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decoratorWithArguments</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;sayHello arguments:&#39;</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;After decoration&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Preparing to call sayHello()&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;say&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;argument&quot;</span><span class="p">,</span> <span class="s">&quot;list&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;after first sayHello() call&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;different&quot;</span><span class="p">,</span> <span class="s">&quot;set of&quot;</span><span class="p">,</span> <span class="s">&quot;arguments&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;after second sayHello() call&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从输出结果中，我们可以看到，带有参数的函数装饰器的行为和以前有很大不同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Inside</span> <span class="n">__init__</span><span class="p">()</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">__call__</span><span class="p">()</span>
</span><span class='line'><span class="n">After</span> <span class="n">decoration</span>
</span><span class='line'><span class="n">Preparing</span> <span class="n">to</span> <span class="n">call</span> <span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">wrapped_f</span><span class="p">()</span>
</span><span class='line'><span class="n">Decorator</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">hello</span> <span class="n">world</span> <span class="mi">42</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">say</span> <span class="n">hello</span> <span class="n">argument</span> <span class="nb">list</span>
</span><span class='line'><span class="n">After</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">after</span> <span class="n">first</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">wrapped_f</span><span class="p">()</span>
</span><span class='line'><span class="n">Decorator</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">hello</span> <span class="n">world</span> <span class="mi">42</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">a</span> <span class="n">different</span> <span class="nb">set</span> <span class="n">of</span> <span class="n">arguments</span>
</span><span class='line'><span class="n">After</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">after</span> <span class="n">second</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意到在装饰阶段<code>__init__</code>函数被调用后，<code>__call__</code>立即被调用了。<code>__call__</code>方法只能接收一个参数，也就是需要被装饰的函数对象，并且必须返回一个经过装饰的函数对象，用来替换被装饰的函数对象。需要注意的是<code>__call__</code>方法只是在装饰阶段被调用一次，在调用阶段是<code>__call__</code>方法返回的函数被真正调用。</p>

<p>带有参数的装饰器采用类的形式时，constructor被用来捕获装饰器的参数，<code>__call__</code>方法不再作为经过装饰的函数对象，取而代之的是，你需要在<code>__call__</code>方法里面定义一个函数来作为被装饰的函数，作为后面函数调用时真正被调用的函数。带参数的装饰器和没有参数的装饰器的代码不太一样，你需要仔细领悟其中的精髓，以不变应万变。</p>

<h2>Decorator Functions with Decorator Arguments</h2>

<p>现在需要看一下比上面稍微复杂一点的带有参数的函数装饰器的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decoratorFunctionWithArguments</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside wrap()&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">wrapped_f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Inside wrapped_f()&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Decorator arguments:&quot;</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">)</span>
</span><span class='line'>            <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;After f(*args)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wrapped_f</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrap</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decoratorFunctionWithArguments</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;sayHello arguments:&#39;</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;After decoration&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;Preparing to call sayHello()&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;say&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;argument&quot;</span><span class="p">,</span> <span class="s">&quot;list&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;after first sayHello() call&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;different&quot;</span><span class="p">,</span> <span class="s">&quot;set of&quot;</span><span class="p">,</span> <span class="s">&quot;arguments&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;after second sayHello() call&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Inside</span> <span class="n">wrap</span><span class="p">()</span>
</span><span class='line'><span class="n">After</span> <span class="n">decoration</span>
</span><span class='line'><span class="n">Preparing</span> <span class="n">to</span> <span class="n">call</span> <span class="n">sayHello</span><span class="p">()</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">wrapped_f</span><span class="p">()</span>
</span><span class='line'><span class="n">Decorator</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">hello</span> <span class="n">world</span> <span class="mi">42</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">say</span> <span class="n">hello</span> <span class="n">argument</span> <span class="nb">list</span>
</span><span class='line'><span class="n">After</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">after</span> <span class="n">first</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span><span class='line'><span class="n">Inside</span> <span class="n">wrapped_f</span><span class="p">()</span>
</span><span class='line'><span class="n">Decorator</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">hello</span> <span class="n">world</span> <span class="mi">42</span>
</span><span class='line'><span class="n">sayHello</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">a</span> <span class="n">different</span> <span class="nb">set</span> <span class="n">of</span> <span class="n">arguments</span>
</span><span class='line'><span class="n">After</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="n">after</span> <span class="n">second</span> <span class="n">sayHello</span><span class="p">()</span> <span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<p>带参数的函数装饰器的返回值必须是用来装饰被装饰函数的函数。也就是说，Python会在装饰阶段使用装饰器返回值，也就是真正的装饰函数，对传进来的需要被装饰的函数对象进行装饰。这也就是为什么这里会有三层函数的原因。最里面的函数是调用阶段真正被执行的函数。</p>

<p>因为closure, <code>wrapped_f</code>函数可得到装饰器的参数<code>arg1</code>, <code>arg2</code>和<code>arg3</code>，而不用像在类的版本里那样明确地把它们存储为属性。</p>

<h3>one more example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@tags</span><span class="p">(</span><span class="s">&#39;p&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@tags</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nd">@tags</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">say_hello</span><span class="p">(</span><span class="s">&#39;jack&#39;</span><span class="p">))</span><span class="err"> </span><span class="sb">``</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="err">输出为：</span>
</span></code></pre></td></tr></table></div></figure>


<p>ini</p>

<p>hello John</p>


<p><a><b>hello jack</b></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">在这个例子中，我们可以看到：</span><span class="n">tags</span><span class="err">有一个参数，也就是</span><span class="n">tag</span><span class="err">的名字。</span>
</span></code></pre></td></tr></table></div></figure>


<p>python
@tags(&lsquo;p&rsquo;)
def get_text(name):
    return &ldquo;hello &rdquo; + name</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">这个函数在执行的时候，背后其实是这样的：</span>
</span></code></pre></td></tr></table></div></figure>


<p>python
get_text = tags(‘p’)(get_text)
```</p>

<p>是不是函数的柯里化？因此，为了让上面这句代码执行成功，tags函数需要返回一个真正的装饰函数，用来装饰需要被装饰的函数。这也就是带有参数的装饰函数需要三层函数的原因所在了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Decorators Step by Step (I)]]></title>
    <link href="http://hengzhang.me/python/2015/11/10/python-decorators_I/"/>
    <updated>2015-11-10T20:20:00+08:00</updated>
    <id>http://hengzhang.me/python/2015/11/10/python-decorators_I</id>
    <content type="html"><![CDATA[<p>Decorator绝对是Python语言most powerful的特性之一。熟悉设计模式的人可能认为Python的Decorator就是装饰器模式，事实上，python的decorator确实可以用来实现装饰器模式，但仅仅止步于此，是不能够真正使用好python的decorator的。</p>

<h2>用 decorators 可以做什么?</h2>

<p>   类似于Java的AOP, python的decorator允许我们在不修改原来函数或者类的代码的情况，动态的为我们的函数或者类增加新的功能。比如说，有100个函数，你想统计每一个函数执行的时间，想一下你会怎么做？是在每一个函数执行的前后分别获取当前系统的时间吗？No, 一个靠谱的程序员是尽量不会让他的代码重复的，何况这里有100次之多。扩大一下问题的规模，比如说现在有1000个，10000个，用上面提到的方法的话，你能保证不出错？
   <!--more--></p>

<p>   当我们使用decorator的时候，你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">entryExit</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Entering {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Exiting {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;The total time of execution of {0} is: {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@entryExit</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func1</span><span class="p">():</span>
</span><span class='line'>    <span class="c">#do something</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@entryExit</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func2</span><span class="p">():</span>
</span><span class='line'>    <span class="c">#do something</span>
</span><span class='line'>
</span><span class='line'><span class="n">func1</span><span class="p">()</span>
</span><span class='line'><span class="n">func2</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>   换句话说，你只需要在每一个函数的前面添加一个类似Java的注解就OK了，方便吧。函数定义的上边新加的一行'@entryExit'意味着对下面定义的这个函数应用entryExit decorator.</p>

<h2>Prerequiste of Python Decorator</h2>

<p>   在开始讲解decorator之前，有一些关于Python函数的基础知识需要掌握下。如果你已经熟悉Closure,可以跳过这一部分。</p>

<p>   作为Python的first class citizen，函数也是对象，这意味着我们可以把函数当做变量来使用。因此，函数可以为其他变量赋值，可以作为其他函数的参数，也可以作为其他函数的返回值。</p>

<h3>Assign functions to variables</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coding</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">“</span><span class="n">coding</span> <span class="k">with</span> <span class="s">&quot;+name</span>
</span><span class='line'>
</span><span class='line'><span class="n">coding_language</span> <span class="o">=</span> <span class="n">coding</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">coding_language</span><span class="p">(</span><span class="s">&quot;Scala”))</span>
</span><span class='line'>
</span><span class='line'><span class="n">Outputs</span><span class="p">:</span> <span class="n">coding</span> <span class="k">with</span> <span class="n">Scala</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Define functions inside other functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coding</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="err">“</span><span class="n">coding</span> <span class="k">with</span> <span class="err">“</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">get_message</span><span class="p">()</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">coding</span><span class="p">(</span><span class="err">“</span><span class="n">Scala</span><span class="err">”</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Outputs: coding with Scala</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Functions can be passed as parameters to other functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coding</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">“</span><span class="n">coding</span> <span class="k">with</span> <span class="err">“</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'><span class="k">def</span> <span class="nf">call_func</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>  <span class="n">other_name</span> <span class="o">=</span> <span class="err">“</span><span class="n">Rust</span><span class="err">”</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">other_name</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">call_func</span><span class="p">(</span><span class="err">“</span><span class="n">Scala</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="c">#Outputs: coding with Scala</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Functions can return other functions</h3>

<p>也就是说，函数可以generate其他的函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">compose_coding_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">“</span><span class="n">coding</span> <span class="k">with</span> <span class="n">Rust</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">get_message</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">coding_language</span> <span class="o">=</span> <span class="n">compose_coding_func</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">coding_language</span><span class="p">())</span>
</span><span class='line'><span class="c">#outpouts: coding with Rust</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Inner functions have access to the enclosing scope</h3>

<p>也即更广为人知的闭包概念。闭包是Python的decorator如此强大背后的支撑技术之一。
Functional Programming&ndash;Advanced R 这本书这样定义闭包：</p>

<blockquote><p> An object is data with functions. A closure is a function with data.” — John D. Cook</p></blockquote>

<p>可以这样来理解闭包：
以大家都熟悉的数学公式来举例。已知函数f(x) = log(x) + i, 其中i已经定义好的变量。要求 x = 8时函数f(x)的值f(8).此时等式f(8)=log(8)+i。要得到函数f(8)的值，我们需要知道变量i的值。若能够从函数的上下文得到i=1, 则可以得到f(8)=log(8)+1, 即若想得到函数值, 必须捕获i的值，这一过程可以理解为对函数执行“关闭”操作，所以叫做闭包。
关于如何得到变量i的值，有两种方法：</p>

<ul>
<li><p>动态作用域<br/>
i的值取决于函数调用时上下文中i的值。<br/>
比如 i = 3, 此时函数的值为f(8)=log(8)+3;<br/>
动态作用域存在一个问题，即以相同的参数调用函数，得到的返回值未必相同，其返回值还取决于上下文中i的值。如i的值在两次函数调用之间发生改变，则返回值不同。</p></li>
<li><p>词法作用域<br/>
i的值取决于函数定义时上下文中i的值。<br/>
比如</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">g</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">g</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里函数f返回一个和上面函数f形式一样的函数，i在此处为2， 那么执行
value = f(3)
得到的value值为5.</p>

<p> 以Pyton代码为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">g</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="c">#Outputs: 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里f要‘记住’自己定义时 i 的值为2， 所以Python解释器在解释时，<strong>f(x) = x + i 和 i = 2 被打包在一起，也即‘闭包’</strong>， 意思是它是独立且完整的，仅仅依靠调用时传递给函数的参数来求值，不再依赖函数调用时的上下文。
需要说明的是，Python的闭包只支持outer scope变量的读操作，不支持out scope变量的赋值操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">compose_coding_func</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">“</span><span class="n">Hello</span> <span class="n">programming</span> <span class="n">language</span> <span class="err">“</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="err">“!”</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">get_message</span>
</span><span class='line'>
</span><span class='line'><span class="n">coding</span> <span class="o">=</span> <span class="n">compose_coding_func</span><span class="p">(</span><span class="err">’</span><span class="n">Rust</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">coding</span><span class="p">())</span>
</span><span class='line'><span class="c">#Outputs: Hello programming language Rust!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Decorator是什么？</h2>

<p>   本质上，python的decorator是一个参数为函数，并且返回值也为函数的函数，也即函数式编程里面的higher order function。</p>

<p>   当在函数定义开始之前加上类似<code>@myDecorator</code>的语句，即代表给这个函数应用了<code>myDecorator</code>装饰器。这也是Python函数装饰器的语法糖，用起来非常方便，不是吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@myDecorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span><span class='line'>   <span class="k">print</span><span class="p">(</span><span class="err">“</span><span class="n">inside</span> <span class="n">func</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>   上面是我们写的第一个函数装饰器，当这段代码经过解释后，<code>func()</code> 被解释，得到的函数对象（注意，函数本身也是对象，一切皆对象）作用参数传递给<code>myDecorator</code>。我们在上面说过了，装饰器本身也是一个函数，无非其比较特殊，其接收的参数是一个函数对象，并且也返回一个函数。在这里，<code>myDecorator</code> 这个函数，也就是装饰器，做了一些该做的事情，并且最终返回一个函数，用来替换刚开始传进来的<code>func()</code>函数。为什么这样说？是因为Python解释器会将上面的代码解释为下面这个样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="o">=</span> <span class="n">myDecorator</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的赋值语句即把<code>myDecorator</code>这个函数的返回值，即一个新的函数对象又传给了func这个变量，这时再去执行<code>func（）</code>，得到的其实是myDecorator返回的那个函数对象的执行结果了。<br/>
请注意，decorator必须得返回一个函数出来给func,不然后面再调用func()这个函数的时候就会出错！</p>

<h3>Using Class as Decorators</h3>

<p>看到这里，很多同学可能会有疑问了，<code>myDecorator</code>到底长啥样子呀？你也没跟我说。大部分关于Python的example会把myDecorator写成函数的形式，但我认为用类的形式来讲解decorator会使读者更清楚decorator背后运行的机制。</p>

<p>Decorator到底应该做什么？事实上，它可以做任何事情但通常，你会期望被装饰的函数在某一个点被装饰器调用，当然，你不调用也没有任何关系。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">myDecorator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="err">“</span><span class="n">inside</span> <span class="n">myDecorator</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span><span class="err">”</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>  <span class="c">#prove that function definition has completed</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="err">“</span><span class="n">insice</span> <span class="n">myDecorator</span><span class="o">.</span><span class="n">__call__</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@myDecorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="err">“</span><span class="n">inside</span> <span class="n">func</span><span class="p">()</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="err">“</span><span class="n">Finished</span> <span class="n">decorating</span> <span class="n">function</span> <span class="n">func</span><span class="p">()</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的执行结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inside</span> <span class="n">myDecorator</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'><span class="n">inside</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'><span class="n">Finished</span> <span class="n">decorating</span> <span class="n">function</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'><span class="n">inside</span> <span class="n">myDecorator</span><span class="o">.</span><span class="n">__call__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到myDecorator这个类的构造器在装饰函数时即被执行。由于我们在<strong>init</strong>()这个构造器里面调用了<code>func()</code>函数，通过结果我们也可以得到函数func()在装饰器被调用之前已经被定义完成。需要注意的是myDecorator这个装饰器的构造器的参数为需要被装饰的函数对象。一般的用法是通过构造器得到需要被装饰的函数对象，然后在<code>__call__</code>函数里面回调。用类的形式来讲解，Decoration和calling是非常清晰的两个阶段，所以我说用类这种形式来讲解更容易理解。</p>

<p>当函数<code>func</code>经过装饰后，再被调用的时候，我们得到了和预期完全不同的结果。是<code>__call__</code>这个函数真正被调用，而不是原来<code>func</code>函数。装饰函数的执行结果替代了被装饰的函数的执行结果。在我们这个例子中，是<code>myDecorator</code>这个对象替换了<code>func</code>对象。</p>

<p>事实上，如果你不嫌麻烦，也可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'>  <span class="c">#do something</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">staticMethod</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过Python提供的<code>@decorator</code>语法糖，你可以用下面的代码得到相同的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@staticMethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'>  <span class="c">#do something</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>@decorator</code>语法糖的意思是: <strong>传递一个原始函数对象给装饰器（函数），装饰器（函数）返回的函数对象再重新赋给原始的函数对象</strong>。</p>

<p>我认为Pyton函数装饰器如此重要的一个原因是，其通过一个很简单的语法糖，改变了我们对于编程的认知。其通过语法约定，将<code>apply code to other code</code>的概念表现得淋漓尽致。</p>

<p>文章刚开始提到的那个例子用类的形式来写就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">entryExit</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;Entering {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">()</span>
</span><span class='line'>      <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;Exiting {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;The total time of execution of {0} is: {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>entryExit</code>这个类的构造器将函数对象作为参数，在｀<strong>call</strong><code>这个函数里面，我们利用函数的</code><strong>name</strong>`属性来输出函数的名字，然后调用了被装饰的函数。</p>

<h3>Using Functions as Decorators</h3>

<p>终于讲到使用函数作为装饰器了。我们在开头的例子里使用的正是这里要讲的函数装饰器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">entryExit</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Entering {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Exiting {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;The total time of execution of {0} is: {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@entryExit</span>
</span><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;hello, world&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Entering</span> <span class="n">func</span>
</span><span class='line'><span class="n">hello</span><span class="p">,</span> <span class="n">world</span>
</span><span class='line'><span class="n">wrapper</span>
</span><span class='line'><span class="n">Exiting</span> <span class="n">func</span>
</span><span class='line'><span class="n">The</span> <span class="n">total</span> <span class="n">time</span> <span class="n">of</span> <span class="n">execution</span> <span class="n">of</span> <span class="n">func</span> <span class="ow">is</span><span class="p">:</span> <span class="mi">0</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>wrapper</code>函数在<code>entryExit</code>函数体中定义，当<code>entryExit</code>函数被调用的时候，<code>wrapper</code>函数即被创建并返回,替换掉原来的<code>func</code>函数成为“新”的<code>func</code>函数。要注意<code>wrapper</code>是一个closure, 因为它捕获了要被装饰的<code>func</code>函数对象。</p>

<p>同时，我们需要注意的是被装饰的函数<code>func</code>里面<code>print(func__name__)</code>这段代码的执行结果是<code>wrapper</code>, 这是因为在装饰阶段（还记得前面提到过的装饰器工作的两个阶段吗?)被装饰的函数<code>func</code>已经被替换掉了。你完全可以在你返回<code>wrapper</code>函数之前做一点小修改:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">entryExit</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Entering {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Exiting {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;The total time of execution of {0} is: {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">))</span>
</span><span class='line'>        <span class="n">wrapper</span><span class="o">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="n">__name__</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样打印出来的函数名字就不再是<code>wrapper</code>, 而是<code>func</code>了。</p>

<p>在下一篇文章里面，我会介绍关于带有参数Python函数装饰器及Python内置的functools模块关于装饰器的内容。</p>

<p>​</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何深入思考]]></title>
    <link href="http://hengzhang.me/think/2015/05/31/how-to-think-concisely/"/>
    <updated>2015-05-31T22:30:00+08:00</updated>
    <id>http://hengzhang.me/think/2015/05/31/how-to-think-concisely</id>
    <content type="html"><![CDATA[<p>首先让我们来看一个很常见的问题：一名计算机专业的学生经常会遇到是该深入学习一门编程语言，还是该多学几门语言来增长见识这样一个问题，有经验的人通常会建议他深入学习一门语言，往往在你深入探索一个领域的知识时，你才有可能突破你的瓶颈，成为更专业的人才，对于其他任何专业都是同样的道理。对于思维的训练更是如此，一个能一秒钟看清事物本质的人和一个花了半年时间才恍然大悟的人，他们的人生自然是不一样的。提升思维的深刻性，对于我们的成长大有裨益。</p>

<p>极简主义，可以提升思维的深刻性。你或许不可以增长你的智商，但可以简化你的问题。在我们遇到问题的时候，往往在定性问题是什么的时候可以看出一个人思维水平。你对这个问题是什么厘得清了，才能把这件事情做好。当然，实际情况往往是在我们做事情的某一个瞬间，才会对问题的本质有初步的认识，因此我们才需要不遗余力的提升自己的思维水平，以达到可以快速定义出问题是什么的境界。</p>

<!--more-->


<p>深刻思维，认清问题本质的三个方法：</p>

<ul>
<li>善于用比喻－－隐喻与类比

<ul>
<li>比喻是认清问题本质的最常用方法，例子比比皆是。

<ul>
<li>成语：雪中送炭，叶公好龙</li>
<li>谚语：一个和尚挑水喝，两个和尚抬水喝，三个和尚没水喝，</li>
<li>寓言：狼来了，</li>
<li>段子<br/>
这些都可以在当今社会找到原型。把一些复杂的社会现象，一些复杂的问题用一些成语谚语等简洁明了的表达出来，可以快速提升我们认清问题本质的能力。</li>
</ul>
</li>
<li>联想力</li>
<li>知识面广<br/>
在当今微博微信知乎等快餐式的阅读时代，多读书还是很重要的，前提是你要读好书。一本好书可以影响你思考的方式，提升你的精神境界，同时也可以使你不被一些乱七八糟的节目所遮住了双眼，轻信一些有悖某些专业领域的常识，但你却不知道的事情。</li>
</ul>
</li>
<li>教学相长－－用举例、设问与反问来推进说明

<ul>
<li>永远不要和一个白痴争论，因为他会把你的智商拉到同一水平，再用丰富的经验打败你</li>
<li>讲故事</li>
<li>不断地采用设问/反问方式</li>
<li>教是最好的学</li>
</ul>
</li>
<li>强调应用－－了解问题对应的物理特征</li>
</ul>


<p> 简化，简化再简化</p>

<p>用简单的一句话，一个词把一件事情的本质说清楚，这个能力很重要，甚至比你发出一篇top论文还重要<br/>
了解抽象前事物的来源，了解一个概念的发展历史，对于我们的学习很重要</p>

<p>做聪明人，花笨功夫<br/>
不搏二兔<br/>
All in<br/>
一万小时</p>

<p>怎么做</p>

<ul>
<li><p>摸索阶段：</p>

<ul>
<li>认清自身，是自己特长与兴趣吗？</li>
<li>观察全局，增加思维洞察力，寻找风口</li>
<li>提升能力</li>
</ul>
</li>
<li><p>准备阶段：</p>

<ul>
<li>确立目标</li>
<li>学习；研究；积累资源（做特种部队，克服冷启动）</li>
</ul>
</li>
<li><p>执行阶段：</p>

<ul>
<li>All in</li>
<li>Enjoy</li>
</ul>
</li>
</ul>


<p>培养大视野的方法</p>

<ul>
<li>回顾你这个领域最好的教科书，教科书是远古的最好论文的集合</li>
<li>多看论文，但只看最好的论文（各领域的顶级会议与顶级期刊）</li>
<li>顶级期刊、会议一篇文章>>普通期刊、会议10篇文章</li>
<li><p>顶级期刊、会议的顶级文章>>顶级期刊、会议的其他文章</p></li>
<li><p>多看创业网站（TechCrunch、36Kr),知道最新的系统和应用</p></li>
<li>多看著名研究团队的主页、博客</li>
<li>多看github上开源项目的介绍</li>
</ul>


<p>学会享受寂寞、接受失败<br/>
享受寂寞，每天踏踏实实地做好工作<br/>
培养勇于探索，承受挫折的精神和能力<br/>
要有耐心<br/>
失败是必然的，成功是偶然的<br/>
好在一次成功能够弥补之前相应的失败<br/>
克服心理上的完美主义倾向</p>

<p>推荐书目：</p>

<ul>
<li>从一到无穷大</li>
<li>赤裸裸的经济学</li>
<li>数学之美</li>
<li>乔布斯的魔力演讲</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次项目排错经历]]></title>
    <link href="http://hengzhang.me/java/2015/04/18/experience-with-project-debug/"/>
    <updated>2015-04-18T19:25:00+08:00</updated>
    <id>http://hengzhang.me/java/2015/04/18/experience-with-project-debug</id>
    <content type="html"><![CDATA[<p>起因，实验室做的前一个项目17号要到北京验收了，结果在数据库保存时出了一个让我们几个人调试了两天的bug。</p>

<p>控制台报错信息的意思是gis.new这张表不存在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SQL</span> <span class="nl">Error:</span> <span class="mi">1146</span><span class="o">,</span> <span class="nl">SQLState:</span> <span class="mi">42</span><span class="n">S02</span>　
</span><span class='line'><span class="n">caused</span> <span class="nl">by:</span><span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">exceptions</span><span class="o">.</span><span class="na">MySQLSyntaxErrorException</span><span class="o">:</span><span class="n">Table</span> <span class="err">&#39;</span><span class="n">gis</span><span class="o">.</span><span class="na">new</span><span class="err">&#39;</span> <span class="n">doesn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">exist</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>可问题的关键是我们的数据库中根本就没有这张表，当然不能保存了。一个最直接的想法就是会不会是谁在代码写的SQL语句不小心写错了，在这个想法的驱动下，我们就开始全面排查代码里面有没有与<strong>new</strong>相关的SQL查询。这个项目做了两年多，代码量还是比较大的，通过各种方法查了一个多小时，发现没有从<strong>new</strong>这张表里面做查询的代码。</p>

<!--more-->


<p>即然其他的model也都能正常的保存，代码里面也没有与<code>select xxx from new where xxx</code>这样的语句出现，那另一个想法就是打断点调试了。最后跟踪到出问题的地方的代码是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">SensorValue</span> <span class="n">transientInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;saving SensorValue instance&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">getHibernateTemplate</span><span class="o">().</span><span class="na">save</span><span class="o">(</span><span class="n">transientInstance</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;save successful&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="n">re</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;save failed&quot;</span><span class="o">,</span> <span class="n">re</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">re</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>java</p>

<p>这段代码里面的<code>getHibernateTemplate().save(transientInstance)</code>这行语句出错了。于是我们就开始了各种分析，其他地方的保存操作都执行的好好的，这个地方为什么就出问题了呢？难道是Hibernate框架本身出问题了？还是代码其他地方存在没有发现的bug?</p>

<p>项目以前采用的数据库是SQL Server,后来因为项目需要在多个地方部署，而SQL Server的安装过程比较烦琐，一个地方出错了导致安装出错就很难在这个系统上成功安装了，又考虑到软件不是免费的原因，所以项目由我迁到了MySQL。当时迁移的时候也是花了比较大的功夫，SQL Server和MySQL反向工程生成的DAO是有差异的，而以前为了方便，在不同的DAO中添加了一些方法，这个是当时迁移时最痛苦的地方，总共有80多张表，只好一个一个对比之后把在DAO中添加的方法重新添加到迁移到MySQL后反向工程生成的DAO中，印象当时前前后后总共花了两三天的时间。从这里深深地体会到了设计模式的重要性！设计模式不就是前人踩过的无数坑之后的经验总结嘛，前人已经总结好了的经验我们却不应用在实践之中，实属不智！貌似扯得有点远，跑题了。。</p>

<p>考虑到系统已经可以正常的运行，所以排除了迁移过程中出现问题的可能性。既然代码都没有问题，那这个错误还依然出现，说明在一些我们不知道的地方还存在一些问题。</p>

<p>第一天下午的时候主播突然有了新发现，把数据库改为本地1月份备份的数据时，项目运行正常，没有报任何bug。这个发现是一个极强的hint,说明我们的数据库存在问题。但问题是我们的项目在1月份的时候基本上已经开发完毕，看了下代码提交记录，后面基本上没有改动。于是，我们又陷入了深深的纠结当中。我们花了一个上午和一个下午的时间，仍没有定位到出错的地方，卒。</p>

<p>真正的进展来自于第二天清晨华姐的一个发现，把数据库中与我们要存储的那张表相关的触发器删掉之后，就可以正常的执行插入操作了。到了这一步，事情已经很明显了，问题就出在与SensorValue表相关的触发器上面。</p>

<p>这个触发器应该是以前在使用SQL Server时通过图形化界面创建的，数据库没有迁移的的时候可以正常运行，上次迁移数据库，把数据库的表结构，数据，触发器还有存储过程都一并迁移到了MySQL平台，之前的测试并没有发现这个bug。触发器的创建语法如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DELIMITER</span> <span class="c1">//</span>
</span><span class='line'> <span class="n">CREATE</span> <span class="n">TRIGGER</span> <span class="n">sensorValueRecordRestoreTrigger</span>
</span><span class='line'><span class="n">after</span>
</span><span class='line'><span class="n">insert</span>
</span><span class='line'><span class="n">on</span> <span class="n">sensor_value</span>
</span><span class='line'><span class="k">for</span> <span class="n">each</span> <span class="n">row</span>
</span><span class='line'><span class="n">begin</span>
</span><span class='line'>    <span class="n">declare</span> <span class="n">sensorId</span> <span class="kt">int</span><span class="o">;</span>
</span><span class='line'>    <span class="n">declare</span> <span class="n">value</span> <span class="nf">varchar</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>    <span class="n">declare</span> <span class="n">time</span> <span class="n">datetime</span><span class="o">;</span>
</span><span class='line'>    <span class="n">declare</span> <span class="n">flag</span> <span class="nf">varchar</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">select</span> <span class="n">sensorId</span> <span class="n">into</span> <span class="n">SensorId</span>  <span class="n">from</span> <span class="k">new</span><span class="o">;</span>
</span><span class='line'>    <span class="n">select</span> <span class="n">value</span> <span class="n">into</span> <span class="n">Value</span> <span class="n">from</span> <span class="k">new</span><span class="o">;</span>
</span><span class='line'>    <span class="n">select</span> <span class="n">time</span> <span class="n">into</span> <span class="n">Time</span> <span class="n">from</span> <span class="k">new</span><span class="o">;</span>
</span><span class='line'>    <span class="n">select</span> <span class="n">flag</span> <span class="n">into</span> <span class="n">flag</span> <span class="n">from</span> <span class="k">new</span><span class="o">;</span>
</span><span class='line'>    <span class="n">insert</span> <span class="n">into</span> <span class="n">sensor_values_real_time</span> <span class="nf">Values</span><span class="o">(</span><span class="n">sensorId</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">time</span><span class="o">,</span><span class="n">flag</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nf">exists</span><span class="o">(</span><span class="n">select</span> <span class="nf">MIN</span><span class="o">(</span><span class="n">Time</span><span class="o">)</span> <span class="n">from</span> <span class="n">sensor_values_realTime</span> <span class="n">where</span> <span class="n">SensorId</span> <span class="o">=</span> <span class="n">sensorId</span>  <span class="n">having</span> <span class="nf">count</span><span class="o">(*)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="n">then</span>
</span><span class='line'>        <span class="n">delete</span> <span class="n">from</span> <span class="n">sensor_values_real_time</span> <span class="n">where</span> <span class="n">Time</span> <span class="nf">IN</span><span class="o">(</span><span class="n">select</span> <span class="nf">MIN</span><span class="o">(</span><span class="n">Time</span><span class="o">)</span> <span class="n">from</span> <span class="n">sensor_values_real_time</span> <span class="n">where</span> <span class="n">SensorId</span> <span class="o">=</span> <span class="n">sensorId</span>  <span class="n">having</span> <span class="nf">count</span><span class="o">(*)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">end</span> <span class="k">if</span><span class="o">;</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="n">DELIMITER</span> <span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>java</p>

<p>看到了吧，bug来处于那几个<code>select xx into yy from new</code>的查询。之前报的错误表<code>gis.new</code>不存在和这里有关。然后简单的建了张表，写了个触发器，来重现出错的场景，这也是自己一直以来的习惯之一，简单粗暴地重现出错误，然后解决它。在执行插入语句后，果然报出了同样的错误：<code>ERROR 1146(42s02):Table triggertest.new doesn't exist.</code>。在得到错误的一瞬间，自己脑洞大开，这不是犯了一个很低级的错误么，new代表的是一行，不是一张表啊。</p>

<p>既然已经知道错误的原因了，那就把<code>from new</code>改为从把这些与表不存在的很明显的错误改完以后，改成<code>select xx into yyy from sensor_value</code>重新运行，本来以为此次抓虫到此结束的，结果以报出了以下错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ERROR</span> <span class="mi">1172</span><span class="o">:</span> <span class="n">Result</span> <span class="n">consisted</span> <span class="n">of</span> <span class="n">more</span> <span class="n">than</span> <span class="n">one</span> <span class="n">row</span>
</span></code></pre></td></tr></table></div></figure>


<p>大概意思是返回的结果有多行组成，这个问题也不大，仔细看了下，发现类似<code>select xxx into yyy  from sensor_value;</code>这样的语句出错了，只需要在后面加上where条件，限制从新插入的那一行数据中查询即可, 改为<code>select xxx into yyy  from sensor_value where id = new.id ;</code>。</p>

<p>嗯，改好后运行之后，不出所料，错误又来了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ERROR</span> <span class="mi">1093</span><span class="o">(</span><span class="n">HY000</span><span class="o">):</span> <span class="n">You</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">specify</span> <span class="n">target</span> <span class="n">table</span> <span class="err">&#39;</span><span class="n">sensor_values_realtime</span><span class="err">&#39;</span> <span class="k">for</span> <span class="n">update</span> <span class="n">in</span> <span class="n">FROM</span> <span class="n">clause</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了下官方文档，发现MySQL在任何情况下，都不允许类似下面的update操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">apples</span><span class="p">(</span><span class="n">variety</span> <span class="nb">char</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span> <span class="n">price</span> <span class="nb">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">apples</span> <span class="k">values</span><span class="p">(</span><span class="s1">&#39;fuji&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;gala&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">update</span> <span class="n">apples</span>
</span><span class='line'>    <span class="k">set</span> <span class="n">price</span> <span class="o">=</span> <span class="p">(</span><span class="k">select</span> <span class="n">price</span> <span class="k">from</span> <span class="n">apples</span> <span class="k">where</span> <span class="n">variety</span> <span class="o">=</span> <span class="s1">&#39;gala&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">where</span> <span class="n">variety</span> <span class="o">=</span> <span class="s1">&#39;fuji&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，如果你对一张表进行增、删、改时，你不能再在内层嵌套查询中再reference这张表了。MySQL<a href="http://dev.mysql.com/doc/refman/5.7/en/update.html">官方文档</a>给出的解释是：<code>Currently, you cannot update a table and select from the same table in a subquery.</code>。嗯，我们使用MySQL,就得遵守人家制定的游戏规则，不然就没得玩儿。可问题是在一些情况下，如果没有refer update目标表的子查询，我们很难写出query语句来，这个是事实。</p>

<p>因为MySQL在执行from子查询语句的时候，会把其处理成临时表，所以我们可以这样干：把我们现在的子查询嵌套到另一个子查询当中，让其执行成为一张临时表，然后我们再在外面的那个子查询当中refer这个临时表。看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">update</span> <span class="n">apples</span>
</span><span class='line'>   <span class="k">set</span> <span class="n">price</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>      <span class="k">select</span> <span class="n">price</span> <span class="k">from</span> <span class="p">(</span>
</span><span class='line'>         <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">apples</span>
</span><span class='line'>      <span class="p">)</span> <span class="k">as</span> <span class="n">x</span>
</span><span class='line'>      <span class="k">where</span> <span class="n">variety</span> <span class="o">=</span> <span class="s1">&#39;gala&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">where</span> <span class="n">variety</span> <span class="o">=</span> <span class="s1">&#39;fuji&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想更深入地了解这段代码背后的原理，请参考MySQL的官方文档的<a href="http://dev.mysql.com/doc/internals/en/select-derived.html">相关部分</a>。</p>

<p>OK，问题到此解决，附上解决以后的触发器写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DELIMITER</span> <span class="o">//</span>
</span><span class='line'> <span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">sensorValueRecordRestoreTrigger</span>
</span><span class='line'><span class="k">after</span>
</span><span class='line'><span class="k">insert</span>
</span><span class='line'><span class="k">on</span> <span class="n">sensor_value</span>
</span><span class='line'><span class="k">for</span> <span class="k">each</span> <span class="k">row</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>    <span class="k">declare</span> <span class="n">mysensorId</span> <span class="nb">int</span><span class="p">;</span>
</span><span class='line'>    <span class="k">declare</span> <span class="n">myvalue</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>    <span class="k">declare</span> <span class="n">mytime</span> <span class="n">datetime</span><span class="p">;</span>
</span><span class='line'>    <span class="k">declare</span> <span class="n">myflag</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">select</span> <span class="n">sensorId</span> <span class="k">into</span> <span class="n">mysensorId</span>  <span class="k">from</span> <span class="n">sensor_value</span> <span class="k">where</span> <span class="n">Id</span><span class="o">=</span><span class="k">new</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">select</span> <span class="n">value</span> <span class="k">into</span> <span class="n">myvalue</span> <span class="k">from</span> <span class="n">sensor_value</span> <span class="k">where</span> <span class="n">Id</span><span class="o">=</span><span class="k">new</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">select</span> <span class="n">time</span> <span class="k">into</span> <span class="n">mytime</span> <span class="k">from</span> <span class="n">sensor_value</span> <span class="k">where</span> <span class="n">Id</span><span class="o">=</span><span class="k">new</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">select</span> <span class="n">flag</span> <span class="k">into</span> <span class="n">myflag</span> <span class="k">from</span> <span class="n">sensor_value</span> <span class="k">where</span> <span class="n">Id</span><span class="o">=</span><span class="k">new</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">insert</span> <span class="k">into</span> <span class="n">sensor_values_realtime</span><span class="p">(</span><span class="n">SensorId</span><span class="p">,</span><span class="n">Value</span><span class="p">,</span><span class="n">Time</span><span class="p">,</span><span class="n">flag</span><span class="p">)</span> <span class="k">Values</span><span class="p">(</span><span class="n">mysensorId</span><span class="p">,</span> <span class="n">myvalue</span><span class="p">,</span> <span class="n">mytime</span><span class="p">,</span><span class="n">myflag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">if</span> <span class="k">exists</span><span class="p">(</span><span class="k">select</span> <span class="k">MIN</span><span class="p">(</span><span class="n">Time</span><span class="p">)</span> <span class="k">from</span> <span class="n">sensor_values_realtime</span> <span class="k">where</span> <span class="n">SensorId</span> <span class="o">=</span> <span class="n">mysensorId</span>  <span class="k">having</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">delete</span> <span class="k">from</span> <span class="n">sensor_values_realtime</span> <span class="k">where</span> <span class="n">Time</span> <span class="k">in</span><span class="p">(</span><span class="k">select</span> <span class="n">Time</span> <span class="k">from</span> <span class="p">(</span><span class="k">select</span> <span class="k">MIN</span><span class="p">(</span><span class="n">Time</span><span class="p">)</span> <span class="k">from</span> <span class="n">sensor_values_realtime</span> <span class="k">where</span> <span class="n">SensorId</span> <span class="o">=</span> <span class="n">mysensorId</span>  <span class="k">having</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">as</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">end</span> <span class="n">if</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">//</span>
</span><span class='line'><span class="k">DELIMITER</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>java</p>

<p>如有错误，欢迎拍砖~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习之Gradient Boosted Regression Trees]]></title>
    <link href="http://hengzhang.me/machine-learning/2015/04/10/Machine-Learning-Gradient-Boosted-Regression-Tree/"/>
    <updated>2015-04-10T10:25:00+08:00</updated>
    <id>http://hengzhang.me/machine-learning/2015/04/10/Machine-Learning-Gradient-Boosted-Regression-Tree</id>
    <content type="html"><![CDATA[<p>实验室在做一个电力相关的大数据项目。现在项目的需求是做一个回归，用来预测温度，湿度和泄露电流之间的关系。数据的格式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>8.0   184.0  143.0
</span><span class='line'>62.0  49.86  95.0
</span><span class='line'>12.0  180.0  144.0s
</span><span class='line'>0.0   0.0    197.0
</span><span class='line'>8.0   184.0  143.0</span></code></pre></td></tr></table></div></figure>


<p>数据的格式一目了然，然而数据的量挺大的，没有清洗之前有400万条，其实也算不上大数据啦。</p>

<p>刚开始本来打算用Hadoop集群上面的Mahout来做，后来看了官方的文档，发现Mahout里面相关的分类算法都是和分类相关的，一定要一个categories参数，于是就否决了Mahout,准备自己用Python来写。
 <!--more--></p>

<p>本来以为很简单的， 做一个最小二乘，拟合一下就可以得出结果，没想到结果出来很差，相关系数比较低。老师一句话就否决了我这个模型：<strong>线性模型肯定不行的啦</strong>。既然线性模型不行，那就寻找非线性的呗。</p>

<p>刚开始考虑用SVM做回归，后来发现在数据量比较大的情况下，其运算的时间复杂度比较高，于是请教实验室的师姐，师姐推荐用随机森林来做。随机森林算法的本质是本质是构建一个树型分类器{hk (x), k＝1，&hellip;}的集合，然后使用该集合通过投票进行分类和预测。后来又发现我们这个特征实在太少，就两个，随机森林的特点是随机选取特征，在我们的数据集里面随机性就无处可用。师姐后来又提到了树回归，于是后来就找到了GBRT(Gradient Boosted Regression Trees)。经过反复的参数调整，最终得到了不错的效果。关于GBRT参数的tuning,可以参考这个<a href="https://www.youtube.com/watch?v=-5l3g91NZfQ">演讲</a>(梯子自备)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;gemire&#39;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">preprocessing</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">datasets</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.utils</span> <span class="kn">import</span> <span class="n">shuffle</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">ensemble</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load data function</span>
</span><span class='line'><span class="k">def</span> <span class="nf">loadDataSet</span><span class="p">(</span><span class="n">fileName</span><span class="p">):</span>
</span><span class='line'>    <span class="n">numFeat</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">numFeat</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dataMat</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">labelMat</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">fr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fr</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class='line'>        <span class="n">lineArr</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">curLine</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numFeat</span><span class="p">):</span>
</span><span class='line'>            <span class="n">lineArr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">curLine</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">dataMat</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">lineArr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">labelMat</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">curLine</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dataMat</span><span class="p">,</span><span class="n">labelMat</span>
</span><span class='line'>
</span><span class='line'><span class="c">#load Data</span>
</span><span class='line'><span class="n">xArr</span><span class="p">,</span><span class="n">yArr</span> <span class="o">=</span> <span class="n">loadDataSet</span><span class="p">(</span><span class="s">&quot;full.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">xArr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">xArr</span><span class="p">)</span>
</span><span class='line'><span class="n">min_max_scaler</span> <span class="o">=</span> <span class="n">preprocessing</span><span class="o">.</span><span class="n">MinMaxScaler</span><span class="p">()</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">min_max_scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">xArr</span><span class="p">)</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">yArr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">X</span><span class="p">[:</span><span class="n">offset</span><span class="p">],</span> <span class="n">y</span><span class="p">[:</span><span class="n">offset</span><span class="p">]</span>
</span><span class='line'><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">offset</span><span class="p">:],</span> <span class="n">y</span><span class="p">[</span><span class="n">offset</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># fit regression model</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;n_estimators&#39;</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span> <span class="s">&#39;max_depth&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="s">&#39;min_samples_split&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&#39;learning_rate&#39;</span><span class="p">:</span><span class="mf">0.1</span><span class="p">,</span> <span class="s">&#39;loss&#39;</span><span class="p">:</span><span class="s">&#39;ls&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">gbr</span> <span class="o">=</span> <span class="n">ensemble</span><span class="o">.</span><span class="n">GradientBoostingRegressor</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">gbr</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span><span class='line'><span class="n">mse</span> <span class="o">=</span> <span class="n">mean_squared_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">gbr</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;MSE: </span><span class="si">%.4f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">mse</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">gbr</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">gbr</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)))</span>
</span><span class='line'><span class="c"># plot training deviance</span>
</span><span class='line'>
</span><span class='line'><span class="c"># compute test set deviance</span>
</span><span class='line'><span class="n">test_score</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;n_estimators&#39;</span><span class="p">],),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">y_pred</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">gbr</span><span class="o">.</span><span class="n">staged_decision_function</span><span class="p">(</span><span class="n">X_test</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">test_score</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">gbr</span><span class="o">.</span><span class="n">loss_</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;Deviance&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;n_estimators&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>         <span class="n">gbr</span><span class="o">.</span><span class="n">train_score_</span><span class="p">,</span> <span class="s">&#39;b-&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">label</span><span class="o">=</span><span class="s">&#39;Training Set Deviance&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">&#39;n_estimators&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>         <span class="n">test_score</span><span class="p">,</span> <span class="s">&#39;r-&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">label</span><span class="o">=</span><span class="s">&#39;Test Set Deviance&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">&#39;upper right&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;Boosting Iterations&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Deviance&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Harsh Truths That Will Make You a Better Person]]></title>
    <link href="http://hengzhang.me/think/2015/03/07/6-harsh-truths-that-will-make-you-a-better-person/"/>
    <updated>2015-03-07T18:30:00+08:00</updated>
    <id>http://hengzhang.me/think/2015/03/07/6-harsh-truths-that-will-make-you-a-better-person</id>
    <content type="html"><![CDATA[<p>如果你的英文水平不错的话，建议阅读<a href="http://www.cracked.com/blog/6-harsh-truths-that-will-make-you-better-person/">原文</a>。 正如我们每天做有许多要去做的想法，但总是被各种借口打断。古语说：“歇事难奋”，有想法，就要定下目标，在规定时间坚决完成，杀掉自己想找的借口。突然想到了周昆教授在我们学院研究生新生开学典礼上的一句话：</p>

<blockquote><p>做事情更重要的是做到专而精，而不是广而不懂。一定要先精于某件事，在你的单位能不能做到No.1,这个非常重要，它决定你的生存问题。</p></blockquote>

<p>这句话和下面的文章一样，一针见血，指出我们立足这个社会的基本原则。但无论它们是干货也好，鸡汤也罢，如果能从中一窥进取之道，赢在执行，亦可以为我们平凡而不普通的生活增添一点乐趣。</p>

<!--more-->




<hr/>


<p> 如果你的职业道路非常顺利，你的生活美满感情顺利，你可以不用读这篇文章。祝你一天愉快，这篇文章不是为你写的。你做的非常出色，我们都为你自豪。</p>

<p>对于其余的人来说，我希望你做一件事情：说出5件你引以为豪的事情。写在纸上也好，或者喊出来也好都可以。但这里有一个条件：你不可以列出你“是”怎样的人（比如，我是一个温柔的人，我很诚实），只能列出你“做”的事情（比如，我刚获得了全国象棋冠军，我做的chili是全麻省最好的）。如果你发现很难列出五件事情，这篇文章就是为你所写的。而且你肯定一边听一边心里会不舒服。我的感受是，如果有人在1995年的时候跟我讲这些事情就好了。</p>

<h2>第6个事实：这个世界只关心你能给予什么</h2>

<p>我们假设一下你最爱的亲人在大街上被枪击了。TA一边失血一边尖叫。一个路人冲上来说“让一下”。他仔细检查了伤口并拿出一把小刀准备在大街上动手术取出子弹。</p>

<p>你问他：“你是医生吗？”
他回答说：“不是”
你说：“你知道你要做什么，对吧？你是不是退伍的军医，还是……”</p>

<p>这个时候那个路人感觉有点不快了。他告诉你说他是一个好人，是一个诚实的人，他上班从来不迟到。他告诉你说他是一个孝顺的儿子。业余生活丰富，生活非常富足。他还说他从不说脏话。</p>

<p>你有点疑惑，说：“这tmd的和我亲人被枪击躺在马路上有什么关系？我需要一个可以在伤口上动手术的人！你到底能不能做？”</p>

<p>现在这个路人非常生气了——为什么你就那么自私肤浅呢？你难道不在乎他的那些优良品德么？他刚才不对你说他总是记住女友的生日吗？他有那么多优良品质，你为什么就抓着他会不会外科手术这个事实不放呢？</p>

<p>在那个疯狂的情形下，你会用你沾满鲜血的双手用力摇晃他的肩膀，大喊道：“废话！你说的那些优良品质都是屁话，因为在当前情况下我只需要一个可以止血动手术的人！你这个神经病给我滚！”</p>

<p>所以，这就是我要说的第一点成人世界的残酷事实：你其实天天都身处于上述的“当前情况”之中。只不过换作你是那个喋喋不休的好心路人，而社会上其他所有人都换作成那个流血的伤者。</p>

<p>如果你想知道为什么社会对你不屑，或者你为什么从不受到尊重，这是因为社会充满了需要某样东西的人。他们需要人来造房子，他们需要食物，他们需要娱乐，他们需要人来满足性欲。你从出生开始就进入了这样的需要解决人们需求的社会系统。</p>

<p>你要么选择学习某种技能担当某样角色满足他人的需要，要么就选择被社会抛弃。这个社会不在乎你有多么善良，礼貌，无私。你会变穷，你会没有朋友，你会被遗弃。
但这是不是说我们要刻版、自私呢？爱和温柔重要吗？当然了，但前提是这些爱是别人需要的，也是从其他人那里得不到的。</p>

<p>否则的话……</p>

<h2>第5个事实：别去相信嬉皮士的话 (Hippies are wrong)</h2>

<p>【原文此处引用了一段<a href="http://v.youku.com/v_show/id_XNTIwNzE5MDg0.html">视频</a> ，到优酷搜索 &lsquo;Glengarry Glen Ross speech&rsquo; 直达，<a href="http://yu.ac.kr/~bwlee/esc/baldwin.htm">英文对白</a> 】</p>

<p>对于那些无法看视频的读者，这是一段著名的影院神片Glengarry Glenn Ross里Alec Baldwin的演讲。Baldwin的角色——你会假设是反角——对一屋子的销售员疯狂施压，警告他们说他们都会被解雇，除非他们可以搞定他们手上的单子。</p>

<p>“好人？关我屁事！慈父？去你ma的！回你的家和你孩子玩去！如果你想在这里工作，给我敲定手上的单子”</p>

<p>非常残酷、粗鲁、甚至有点疯狂。可是，这恰恰是这个社会对你期望的最诚实的写照。不同的是，在现实世界里，人们认为那样讲话太粗鲁了对你不礼貌，于是他们干脆什么都不说眼看着你失败。</p>

<p>这个电影片段改变我的人生。我如果知道怎么做的话，会把它录成闹钟每天早上叫我起床。Baldwin因此还拿了奥斯卡奖，而这个片段是他整个电影唯一出场的场景！正如前人已经分析过，这段演讲精彩之处在于，一般的人会理解为“天哪，我要有这么一个混蛋老板会怎样啊？”。而另一半人却会想“太tm励志了！我现在就想去上班做业务去！”</p>

<p>或者，有一个心理学家写道：“如果当时你在那个房间里，你们中的一些人会明白这是工作，会从那段演讲里吸收能量，就像一个球队教练冲你大骂一样。你会觉得‘这家伙太有能耐了’。而另一些人会非常介意，认为这个老板是混蛋，你没有权利跟我这样说话。”
以上节选自一篇对于hipster(如果不知道它的意思，请自行google之)的批判文章。文章解释了这些人为什么会难找工作，并指出上述两种不同的态度——受刺激vs受激励——很大程度上决定你是否在现实生活中能成功。</p>

<p>比如说，有人会引用搏击俱乐部里的经典台词“You are not your job”。但事实上，你完完全全就是你的job（职责）。当然了，你的职责和你为公司的服务不是一回事请，但其实你只不过是你所有有用技能经验的综合体罢了。技能是某一个个体能为社会中其他人提供的有用服务。但别搞错了，你的“职责”——你为他人提供的有用服务——就是你的全部。</p>

<p>这就是为什么外科医生比喜剧作家更受到尊重。也是为什么机修工比无业潮人更受到尊重。如果你的死讯能登上新闻，这说明你的工作已经成为了你的标签。搏击俱乐部里Tyler说You are not your job，但他同时又操办了一家成功的肥皂公司同时成为了社会运动的领导人。He was totally his job。</p>

<p>我们再这样理解一下：你还记得Chick-fil-A餐厅反对同性恋婚姻么？不论嬉皮们如何抗议，公司还不是照样卖出了成千上万的汉堡？这不是说顾客们认可他们，而是因为他们成功地完成了履行了他们的职责——做好吃的汉堡。这一点才是最关键的。</p>

<p>你不一定非要从心里喜欢这个事实。我也不喜欢我生日的时候天下雨。但天还是要下雨。人们有需求，人们会认可能够满足他们需求的人。世界就是通过这么简单的机制运行的，谁也改变不了。</p>

<p>如果你抗议说，我不是肤浅的物质主义者，金钱不是万能的，我只能说：我有说过金钱吗？说明你没看懂我的要点。</p>

<h2>第4个事实：你所做的事情不一定要换成钱，但一定要有益于他人</h2>

<p>那么我们换一个非金钱的例子好了。这个网站(cracked.com)主要面向20出头的男性。我每天都要从邮箱里收到一大堆挫男抱怨女人不愿意接近他们，虽然他们是世界上最nice的男人。我可以解释他们的思路有什么问题，不过最好是让Alec Baldwin解释最好。</p>

<p>（译注：此处再次引用上述视频，我真的建议大家去看那个片段！）</p>

<p>在我们说的例子里，Baldwin就是你生活里那个女神。他们当然不会像Baldwin的角色那样粗鲁直接——社会教育我们不要对别人那么“诚实”——但问题是一样的：“你是好人？关我屁事！想在这里工作，就给我搞定工作。”</p>

<p>所以，你有什么感想呢？你对在书店里遇到的女神每天白日梦YY，为她午餐不吃色拉感到惋惜。她10年后会成为一个外科医生，你呢？</p>

<p>“什么？你是说除非我找到一个好工作赚大钱否则不可能把到女神？”</p>

<p>不！你的大脑跳跃太快了，因此你可以给自己一个理由认为所有拒绝你的女神都是肤浅自私的。我在这里就问一个问题：你给予了什么？你聪明么？幽默吗？情趣吗？天才？雄心？创意？好，那你做什么事情能向这个世界证明自己的优点呢？不要跟我说你是个好人——这是最起码的。你的女神每天有三打的男人对她“好”。用我们上文的例子来说，伤者在大街上流血，你到底会不会开刀？</p>

<p>“我不歧视女人，不歧视种族，不贪婪，不肤浅，也不虐待人！我和那些diao不垃几的男人不一样。”
很抱歉，如果你所能做的事情只不过是你“没有”一堆缺点，就tmd给我从伤者身边滚出去！我们有的是风趣、英俊、事业成功的男人来帮助你的女神。</p>

<p>伤到你自尊了么？有一点？那现在怎样呢？你想碎碎念呢，还是打算学习怎么去做手术治疗那个伤者？取决于你。但你不要去抱怨为什么女神就喜欢找你口中的坏男人。她们吃这套是因为那些diao不拉几的男人有其他东西可以满足你的女神。“但我是一个聆听者！”是吗？你可以坐在女神身边几个小时听她念叨？你猜怎么着？角落里还有另一个男人可以这样做，他还是吉他高手！你如果不停地说你是一个好人，就像一个餐厅说他们的卖点是他们的食物不会让你拉肚子一样，就像一部电影的标题是“This Movie is in English”。</p>

<p>这就是为什么你可以做一个好人但仍然觉得自己是loser。</p>

<h2>第3个事实：你恨自己是因为你无所作为</h2>

<p>“所以你的意思是要我去买一本教我如何把妹的书么？”
当然不是，除非那本书的第一章是“让自己变成女孩子愿意接近的人”。因为这一步总是容易被忽略——人们总是问“我怎么能找到工作？”而不是“我如何成为雇主愿意雇用的人？”；人们总是问“怎么让女孩喜欢我？”而不是“我怎么成为女孩喜欢的人？”。对吧？因为后者往往要求你放弃自己喜欢的爱好，注重外表，天知道还要做其他什么牺牲。你甚至还可能要改变你的天性。</p>

<p>“但是为什么我不能就去找一个喜欢原本的我的人呢？”答案很简单：人是有需求的。别忘记我们的例子：伤者在流血，而你所做的只是抱怨找不到会自动愈合的伤口？</p>

<p>【此处插入一段Youtube上点击率很高的猥琐街头艺人表演的视频】</p>

<p>每个人看了上面这段视频都会会心一笑。你能为人们带来笑声么？为什么不呢？是为什么阻止你穿上猥琐的衣服在街头边唱边甩鸡鸡呢？那家伙似乎知道赢得掌声的门道……做怪事……总比什么都不做好……</p>

<p>“但是我什么都不擅长！”我有好消息告诉你：如果你尝试反复练习做一件事情，任何事情，你都可以擅长此事。我小时候可能是全世界最糟糕的作者。到了25岁的时候稍微好那么一点点。但当我职场失意的时候，我用业余时间写作长达八年，一周写一篇文章，直到它为我换回了钞票。我花了13年时间才能登上纽约时报畅销书榜单。我大概花了20000个小时才慢慢磨快了我拙劣的文笔。</p>

<p>不希望花那么多时间磨练一门技术？那么我有好消息和坏消息告诉你。好消息是漫长的磨练可以让你慢慢走出困境——我忍受了多年琐碎的办公室工作，因为我知道我同时在学习一门技能。人们半途而废是因为要看到结果实在是太漫长了，同时也是因为他们没有意识到“结果”就是过程本身。
坏消息是你别无选择。“想继续在这里工作？给我搞定手里的单子”</p>

<p>从我个人角度出发看，你并不是因为缺乏自信而恨自己，或者是因为别人羞辱你。你恨自己是因为你【什么都不做】。连你自己都不能爱“原本的自我”——这就是为什么你很可悲，不断写私信问我如何处理你的生活问题。</p>

<p>自己扳手指算一下：你有多少时间是在消费别人创造的东西（电视，音乐，电玩，网站）而不是生产你自己的东西？只有你的“产出”才能为你添加作为人的价值。</p>

<p>如果你听到这里听不下去了，并且用你从小听到大的陈词滥调回应说：“人的内在才是最重要的”，那么我只能说……（接下文）</p>

<h2>第2个事实：你的内在只有通过所做的事情才能表现出来</h2>

<p>在我所从事的行业里，我认识无数有理想的作家。他们认为自己是作家，他们在聚会上介绍自己是作家，他们拥有一颗作家的热心。他们只缺乏最后的一步：写点tmd像样的东西出来。</p>

<p>是吗？难道“写点东西”就是真正决定谁是谁不是真正“作家”的标准吗？
我的天哪，当然是了！</p>

<p>这恰恰是对我以上所说一切最常见的反驳，也是对你生活中批评声音最常见的反驳。这是你不断对你自己暗示以逃避能帮你改善自我的刻苦工作的理由。“我知道我的内在是一个很好的人”。你也会听到人说“我做我自己”。</p>

<p>不要误会我的意思：你的内在非常重要。一个男人如果为了他的家庭从无到有造出一栋房子完全是因为他的内在是一个好人。你所做的一切坏事最初是一个坏的念头，萦绕在你脑中，直到最后实施。同样，做一件好的事情也是一样道理——内在的自我是你成功果实赖以生长的土壤。</p>

<p>但是所有人都应该知道，所有人却都不能接受的事实是：“没有最后的果实，你就什么都不是”</p>

<p>比如你内心非常同情穷人。很伟大。这会让你最后做什么实事么？你听到你社区里一些悲剧发生后，你会说“这些不幸的孩子啊，让他们知道我在内心同情他们”吗？你要这么说我就只好说法克you——给我去真正帮助他们才是真的。数以千万的人看了那段Kony视频（译注：2012年Youtube上很有争议的关于非洲儿童的视频），所有看过的人都“在心里同情他们”。那么这么强大的同情给儿童们带来了什么呢？屁都没有！每天有非洲的儿童死于非命，因为数以百万的我们对自己说关心和行动一样重要。这是我们内心的一种心理机制，控制着我们大脑里犯懒的那一部分，让我们不断逃避真正去做实事。</p>

<p>有多少人此刻正在想：“她（他）如果知道我是多么有趣的人，一定会爱上我。”真的吗？你那些有趣的想法有多少让世人知道了呢？如果你的心上人有一个隐藏摄像机跟着你拍一个月，他们会被录影的内容打动吗？记住，人们不会读心术，他们只会观察你的行动。</p>

<p>我希望你做的，只不过是用你看别人的标准来看你自己罢了。你有没有一个烦人的基督徒朋友给别人最大的帮助只不过是“我为你祈祷”？你觉得烦不烦？我这里还没涉及到祈祷是不是实际有用呢，他们提供的帮助不需要他们屁股离开沙发就可以做。他们认为自己思想纯净，但是他们纯净的思想土壤有没有结出果实呢？他们自己应该比别人更清楚这点——因为我“土壤-果实”的比喻就是从圣经里拿来的。圣经里耶稣曾经不止一次说过“人们是根据果实来评判一颗树的”。当然，耶稣从来不会说“想继续留在这里工作，就给我搞定单子”，但他说“凡不结好果实的树，都要砍下來，扔在火里。”</p>

<p>对以上这些话无动于衷的人，就如同电影里对Baldwin无动于衷的业务员一样。</p>

<h2>第1个事实： 人的内心其实一直在拒斥进步</h2>

<p>人类的大脑是很神奇的。但你会发现大脑在拒斥进步的时候运转得比做实事的时候还快。你的意识会通过层层防御机制来排斥任何会让你改变现状的事情——问一下对任何事物有瘾头的人就知道了。</p>

<p>所以，到现在，你们中的许多人一边读这篇文章，一边会感觉到大脑在不断提供排斥这篇文章的理由。从经验上说，这些想法通常是：</p>

<p>有意将任何批评理解为侮辱</p>

<p>“他凭什么说我又懒又没用？一个善良的人从来不会这样对我说话！作者写这些东西只不过是想显示自己有多么优越，让我这个loser对自己生活不满罢了！等我回复更损人的话给你！”</p>

<p>对人不对事</p>

<p>“这人有什么资格告诉我怎么活？他自以为自己了不起吧？不过是网上的一个白痴写手罢了！我要去人肉他，看他有什么丑事可以抖出来。这人真自以为是，让我作呕”</p>

<p>只看语气，不看内容</p>

<p>“我会仔细看你的文章，找出一句话，断章取义只讨论那个。”</p>

<p>不断修饰你的过去</p>

<p>“事情没那么糟糕。确实我上个月还想自杀呢，但现在我感觉好多了！也许我只要继续做我现在做的事情，情况会好的。让我继续给那个女神修电脑，女神总会到我身边的！”</p>

<p>认为改善生活的行为总会让你失去自我</p>

<p>“哦，那么你是让我扔掉所有的漫画书。天天去健身房6小时？因为除此之外我没选择了？”</p>

<p>当然还有其他的想法。记住： 痛苦是会让人感到舒坦的。许多人选择拥抱痛苦。幸福是需要努力的。</p>

<p>还有：勇气。人们无法批评你根本没有去创造出来的东西，所以人们选择什么都不做来避免批评。
人们很容易双手一叉裤袋批评别人的工作。这个电影很傻，这对父母的小孩很皮，那对情侣的感情很糟糕，那个暴发户不学无术，这个餐厅糟透了，本文作者是个白痴，我倒不如留一条损的回复让网站开除他，瞧，我这不“创造”了一些东西么？</p>

<p>哦，是啊，我忘记提醒你了。不论你尝试建造或者创造什么东西——诗歌也好，新的技术也好，或者新的感情也好——你会立刻发现自己身边多了很多批评家。这些批评家也许不会当你面损你，但是他们确实在挖苦你。你的酒鬼朋友不希望你清醒，你肥胖的朋友不希望你苗条，你无业的朋友不希望看到你开始新的职业。</p>

<p>记住，他们不过在表达他们对生活的恐惧罢了，批评别人的工作是自己不作为的另一个理由。“为什么我要创造什么东西呢，你看别人做的东西都糟透了！”“我想写小说，不过我要等时机，我可不想写出暮光那样肤浅的东西”。只要他们永远不动手去做事情，事情就永远是完美的。或者他们如果真的着手做事情了，他们会故意不努力，让别人认为事情做不好是因为他们不在状态，“他们真正的潜力是无穷的”，不是你看到的狗屎一样的产品。</p>

<p>往下翻读一下本文的回复——那些很极端的回复，永远都是“Cracked应该炒了这个作者”“这个自负的白痴应该停止写作”。所有一切的负面评论潜台词永远都是“停止创作，如果换我来创作绝对比这个好千倍，你现在得到那么多人气让我自己很没面子。”</p>

<p>不要成为上述的那种人。如果你是那种人，请不要继续成为那样的人。这正是人们为什么不喜欢你的原因，这正是你恨自己的原因。</p>

<p>所以，我有个建议：给自己定一个期限，2015年底，或者从你读本文之后的一年。当别人跟你说“我的新年计划是减肥15磅”的时候，我说咱们应该努力去做任何一件事情——学习新的技能直到足够有用为止，或者随便选一件事情：学空手道，学跳舞，学陶艺，做一个鸟屋，学习按摩，学一门语言，甚至拍一部A pian，做蝙蝠侠打击犯罪……</p>

<p>关键在于：我不希望你把眼光放在某个过高的目标上，我希望你专注于获得一样新的， 对其他人有用的技能和经验。</p>

<p>“我没钱参加烹饪班”，那就tmd给我Google“如何烹饪”。我的天，拜托你戒掉这些借口，否则这些借口就要你命了。（You have to kill those excuses, or they will kill you）</p>
]]></content>
  </entry>
  
</feed>
